/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef STORAGEBACKEND_H
#define STORAGEBACKEND_H
#include <QObject>

namespace LeechCraft
{
	/** @brief Abstract base class for storage backends.
	 *
	 * Specifies interface for all storage backends. Includes functions for
	 * storing the history, favorites, saved passwords etc.
	 */
	class StorageBackend : public QObject
	{
		Q_OBJECT
	public:
		StorageBackend (QObject* = 0);
		virtual ~StorageBackend ();

		/** @brief Do post-initialization.
		 *
		 * This function is called by the Core after all the updates are
		 * checked and done, if required.
		 */
		virtual void Prepare () = 0;
		/** @brief Get authentication information.
		 *
		 * Finds authentication information for the given realm and puts it
		 * into login and password. If no information is found, leaves these
		 * fields unchanged.
		 *
		 * @param[in] realm Realm of the interesting authentication resource.
		 * @param[out] login Stored login.
		 * @param[out] password Stored password.
		 */
		virtual void GetAuth (const QString& realm,
				QString& login, QString& password) const = 0;
		/** @brief Set authentication information.
		 *
		 * Sets authentication information for the given realm from passed
		 * parameters. Creates a new record if there is no older one,
		 * updates old record otherwise.
		 *
		 * @param[in] realm Realm of the authentication resource.
		 * @param[in] login New login.
		 * @param[in] password New password.
		 */
		virtual void SetAuth (const QString& realm,
				const QString& login, const QString& password) = 0;
	};
};

#endif

