/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef XMLSETTINGSDIALOG_DIR_H
#define XMLSETTINGSDIALOG_DIR_H
#include <memory>
#include <QObject>
#include <QMetaType>
#include <QScriptEngine>
#include <QDir>

namespace LeechCraft
{
	class Dir : public QObject
	{
		Q_OBJECT

		std::auto_ptr<QDir> Imp_;
	public:
		Dir (QObject* = 0);
		Dir (const Dir&);
		virtual ~Dir ();
	public slots:
		QString absoluteFilePath (const QString&) const;
		QString absolutePath () const;
		QString canonicalPath () const;
		bool cd (const QString&);
		bool cdUp ();
		uint count () const;
		QString dirName () const;
		QFileInfoList entryInfoList (const QStringList&,
				QDir::Filters = QDir::NoFilter,
				QDir::SortFlags = QDir::NoSort) const;
		QFileInfoList entryInfoList (QDir::Filters = QDir::NoFilter,
				QDir::SortFlags = QDir::NoSort) const;
		QStringList entryList (const QStringList&,
				QDir::Filters = QDir::NoFilter,
				QDir::SortFlags = QDir::NoSort) const;
		QStringList entryList (QDir::Filters = QDir::NoFilter,
				QDir::SortFlags = QDir::NoSort) const;
		bool exists (const QString&) const;
		bool exists () const;
		QString filePath (const QString&) const;
		QDir::Filters filter () const;
		bool isAbsolute () const;
		bool isReadable () const;
		bool isRelative () const;
		bool isRoot () const;
		bool makeAbsolute ();
		bool mkdir (const QString&) const;
		bool mkpath (const QString&) const;
		QStringList nameFilters () const;
		QString path () const;
		void refresh () const;
		QString relativeFilePath (const QString&) const;
		bool remove (const QString&);
		bool rename (const QString&, const QString&);
		bool rmdir (const QString&) const;
		bool rmpath (const QString&) const;
		void setFilter (QDir::Filters);
		void setNameFilters (const QStringList&);
		void setPath (const QString&);
		void setSorting (QDir::SortFlags);
		QDir::SortFlags sorting () const;
	public:
		Q_INVOKABLE bool operator!= (const Dir&) const;
		Q_INVOKABLE Dir& operator= (const Dir&);
		Q_INVOKABLE bool operator== (const Dir&) const;
		Q_INVOKABLE QString operator[] (int) const;
	};
};

Q_DECLARE_METATYPE (LeechCraft::Dir);
Q_SCRIPT_DECLARE_QMETAOBJECT (LeechCraft::Dir, QObject*);

#endif

