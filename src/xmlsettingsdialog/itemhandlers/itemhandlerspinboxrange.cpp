/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/
#include "itemhandlerspinboxrange.h"
#include <QLabel>
#include <QGridLayout>
#include <QtDebug>
#include "../rangewidget.h"

namespace LeechCraft
{
	ItemHandlerSpinboxRange::ItemHandlerSpinboxRange ()
	{
	}

	ItemHandlerSpinboxRange::~ItemHandlerSpinboxRange ()
	{
	}

	bool ItemHandlerSpinboxRange::CanHandle (const QDomElement& element) const
	{
		return element.attribute ("type") == "spinboxrange";
	}

	void ItemHandlerSpinboxRange::Handle (const QDomElement& item,
			QWidget *pwidget)
	{
		QGridLayout *lay = qobject_cast<QGridLayout*> (pwidget->layout ());
		QLabel *label = new QLabel (XSD_->GetLabel (item));
		label->setWordWrap (false);

		RangeWidget *widget = new RangeWidget ();
		XSD_->SetTooltip (widget, item);
		widget->setObjectName (item.attribute ("property"));
		widget->SetMinimum (item.attribute ("minimum").toInt ());
		widget->SetMaximum (item.attribute ("maximum").toInt ());

		const QVariant& value = XSD_->GetValue (item);

		widget->SetRange (value);
		connect (widget,
				SIGNAL (changed ()),
				this,
				SLOT (updatePreferences ()));

		widget->setProperty ("ItemHandler", QVariant::fromValue<QObject*> (this));
		widget->setProperty ("SearchTerms", label->text ());

		int row = lay->rowCount ();
		lay->addWidget (label, row, 0, Qt::AlignRight);
		lay->addWidget (widget, row, 1);
	}

	QVariant ItemHandlerSpinboxRange::GetValue (const QDomElement& item,
			QVariant value) const
	{
		if (!value.isValid () ||
				value.isNull () ||
				!value.canConvert<QList<QVariant>> ())
		{
			const QStringList& parts = item.attribute ("default").split (":");
			QList<QVariant> result;
			if (parts.size () != 2)
			{
				qWarning () << "spinboxrange parse error, wrong default value";
				return QVariant ();
			}
			result << parts.at (0).toInt () << parts.at (1).toInt ();
			value = result;
		}
		return value;
	}

	void ItemHandlerSpinboxRange::SetValue (QWidget *widget,
			const QVariant& value) const
	{
		RangeWidget *rw = qobject_cast<RangeWidget*> (widget);
		if (!rw)
		{
			qWarning () << Q_FUNC_INFO
				<< "not a RangeWidget"
				<< widget;
			return;
		}

		rw->SetRange (value);
	}

	void ItemHandlerSpinboxRange::UpdateValue (QDomElement& element,
			const QVariant& value) const
	{
		const QStringList& vals = value.toStringList ();
		if (vals.size () != 2)
		{
			qWarning () << Q_FUNC_INFO
				<< "spinboxrange value error, not 2 elems in list"
				<< value;
			return;
		}
		element.setAttribute ("default", vals.at (0) + ':' + vals.at (1));
	}

	QVariant ItemHandlerSpinboxRange::GetObjectValue (QObject *object) const
	{
		RangeWidget *widget = qobject_cast<RangeWidget*> (object);
		if (!widget)
		{
			qWarning () << Q_FUNC_INFO
				<< "not a RangeWidget"
				<< object;
			return QVariant ();
		}
		return widget->GetRange ();
	}
};
