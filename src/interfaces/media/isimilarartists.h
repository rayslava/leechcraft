/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QString>
#include <QtPlugin>

namespace Media
{
	class IPendingSimilarArtists;

	/** @brief Interface for plugins supporting similar artists.
	 *
	 * If a plugin supports fetching artists similar to another one it
	 * should implement this interface.
	 *
	 * @sa IRecommendedArtists
	 */
	class Q_DECL_EXPORT ISimilarArtists
	{
	public:
		virtual ~ISimilarArtists () {}

		/** @brief Requests the recommended artists.
		 *
		 * This function initiates request for the list of artists
		 * similar to a given one and returns a handle through which the
		 * results of this search could be obtained. The handle owns
		 * itself and deletes itself after results are available â€” see
		 * its documentation for more details.
		 *
		 * The results of the returned handle will typically have only
		 * SimilarityInfo::Similarity_ field set, while
		 * SimilarityInfo::SimilarTo_ field is unset. The Similarity
		 * field should be interpreted as some kind of "match percentage"
		 * displaying how much two artists resemble each other.
		 *
		 * @param[in] artistName The name of the artist for which to
		 * fetch similar artists.
		 * @param[in] count The number of recommended artists to fetch.
		 */
		virtual IPendingSimilarArtists* GetSimilarArtists (const QString& artistName, int count) = 0;
	};
}

Q_DECLARE_INTERFACE (Media::ISimilarArtists, "org.LeechCraft.Media.ISimilarArtists/1.0");
