/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef UTIL_TAGSCOMPLETER_H
#define UTIL_TAGSCOMPLETER_H
#include <QCompleter>
#include <util/utilconfig.h>

namespace LeechCraft
{
	class TagsManager;

	namespace Util
	{
		class TagsLineEdit;

		/** @brief Completer suitable for tag completion.
		 *
		 * Handles tag completions. One would need special class for this
		 * because standard QCompleter doesn't work: tag sequence isn't
		 * hierarchical, it is rather a set.
		 *
		 * Despite the TagsCompleter is designed for tags completion
		 * and, consequently, uses the globally available tags model
		 * from LeechCraft's tags manager, it's possible to use the
		 * completer for other ';'-separated lists of values, by setting
		 * the appropriate completion model via OverrideModel() method.
		 *
		 * @sa TagsCompletionModel
		 * @sa TagsLineEdit
		 */
		class TagsCompleter : public QCompleter
		{
			Q_OBJECT

			UTIL_API static QAbstractItemModel *CompletionModel_;
			friend class LeechCraft::TagsManager;

			TagsLineEdit *Edit_;
		public:
			/** @brief Constructs the completer.
			 *
			 * Sets up for completion and prepares line for work with itself.
			 *
			 * @param[in] line The line edit which would be used for tag
			 * completion.
			 * @param[in] parent Parent object.
			 */
			UTIL_API TagsCompleter (TagsLineEdit *line,
					QObject *parent = 0);

			/** @brief Replaces the model this completer works with.
			 *
			 * By default, the completer uses global tags model, which
			 * is suitable for autocompletion of tags. If you want to
			 * use a custom model with custom contents, use this method
			 * to override the model used for completion.
			 *
			 * @param[in] model The model to use.
			 */
			UTIL_API void OverrideModel (QAbstractItemModel *model);

			/** @brief Path splitter override.
			 *
			 * Handles sequence of tags considering its set structure. Splits
			 * the path by spaces and returns the resulting string list.
			 *
			 * @param[in] path The tags sequence to split.
			 * @return Splitted sequence.
			 */
			UTIL_API virtual QStringList splitPath (const QString& path) const;
		protected:
			static void SetModel (QAbstractItemModel *model)
			{
				CompletionModel_ = model;
			}
		};
	};
};

#endif

