/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QStringListModel>
#include <QStringList>
#include <util/utilconfig.h>

namespace LeechCraft
{
namespace Util
{
	/** @brief A QStringListModel providing additional methods for tags.
	 *
	 * This model is basically a QStringListModel with additional methods
	 * for easy working with tags.
	 */
	class UTIL_API TagsCompletionModel : public QStringListModel
	{
		Q_OBJECT
	public:
		/** @brief Creates the model with the given parent.
		 *
		 * @param[in] parent The parent object of this model.
		 */
		TagsCompletionModel (QObject *parent = 0);

		/** @brief Adds new tags to the list of tags.
		 *
		 * This method adds the \em newTags to the already existing list
		 * of tags avoiding duplicates and emits the tagsUpdated()
		 * signal.
		 *
		 * @param[in] newTags The new tags to append to this model.
		 */
		void UpdateTags (const QStringList& newTags);
	signals:
		/** @brief Emitted when tags are updated via UpdateTags().
		 *
		 * @param[in] allTags All tags in this model.
		 */
		void tagsUpdated (const QStringList& allTags);
	};
}
}
