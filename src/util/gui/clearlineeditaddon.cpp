/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "clearlineeditaddon.h"
#include <QLineEdit>
#include <QToolButton>
#include <QApplication>
#include <QStyle>

namespace LeechCraft
{
namespace Util
{
	ClearLineEditAddon::ClearLineEditAddon (ICoreProxy_ptr proxy, QLineEdit *edit)
	: QObject (edit)
	, Button_ (new QToolButton (edit))
	, Edit_ (edit)
	{
		const bool isRtl = QApplication::layoutDirection () == Qt::RightToLeft;
		const auto& icon = proxy->GetIcon (isRtl ?
				"edit-clear-locationbar-ltr" :
				"edit-clear-locationbar-rtl");

		Button_->setIconSize (QSize (16, 16));
		Button_->setIcon (icon);
		Button_->setCursor (Qt::ArrowCursor);
		Button_->setStyleSheet ("QToolButton { border: none; padding: 0px; }");
		Button_->hide ();

		connect (Button_,
				SIGNAL (clicked ()),
				edit,
				SLOT (clear ()));
		connect (edit,
				SIGNAL (textChanged (QString)),
				this,
				SLOT (updateButton (QString)));

		const auto& buttonSH = Button_->sizeHint ();

		const int frameWidth = edit->style ()->pixelMetric (QStyle::PM_DefaultFrameWidth);
		edit->setStyleSheet (QString ("QLineEdit { padding-right: %1px; }")
					.arg (buttonSH.width () + frameWidth + 1));
		const auto msz = edit->minimumSizeHint ();
		edit->setMinimumSize (qMax (msz.width (), buttonSH.height () + frameWidth * 2 + 2),
						qMax (msz.height(), buttonSH.height () + frameWidth * 2 + 2));

		UpdatePos ();

		edit->installEventFilter (this);
		updateButton (edit->text ());
	}

	bool ClearLineEditAddon::eventFilter (QObject *obj, QEvent *event)
	{
		if (event->type () == QEvent::Resize ||
			event->type () == QEvent::Move)
			UpdatePos ();

		return QObject::eventFilter (obj, event);
	}

	void ClearLineEditAddon::UpdatePos ()
	{
		const auto& hint = Button_->sizeHint ();
		const auto& rect = Edit_->rect ();
		const int frameWidth = Edit_->style ()->pixelMetric (QStyle::PM_DefaultFrameWidth);
		Button_->move (rect.right () - frameWidth - hint.width (),
				(rect.bottom () + 1 - hint.height ()) / 2);
	}

	void ClearLineEditAddon::updateButton (const QString& text)
	{
		Button_->setVisible (!text.isEmpty ());
	}
}
}
