/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef INTERFACES_EXCEPTIONS_H
#define INTERFACES_EXCEPTIONS_H
#include <exception>
#include <QString>
#include <QList>
#include "utilconfig.h"

class QObject;

namespace LeechCraft
{
	class UTIL_API StandardException : public std::exception
	{
	protected:
		QString What_;
	public:
		StandardException (const QString& what);
		virtual ~StandardException () throw ();

		virtual const char* what () const throw ();
	};

	class UTIL_API DependencyException : public StandardException
	{
	public:
		DependencyException (const QString& what);
		virtual ~DependencyException () throw ();
	};

	class UTIL_API InjectionFailureException : public DependencyException
	{
	public:
		InjectionFailureException (const QString& what);
		virtual ~InjectionFailureException () throw ();
	};

	class UTIL_API ReleaseFailureException : public DependencyException
	{
		QList<QObject*> Holders_;
	public:
		ReleaseFailureException (const QString& what,
				const QList<QObject*>& holders);
		virtual ~ReleaseFailureException () throw ();

		virtual const char* what () const throw ();
	};

	class UTIL_API SerializationException : public StandardException
	{
	public:
		SerializationException (const QString& what);
		virtual ~SerializationException () throw ();
	};

	class UTIL_API UnknownVersionException : public SerializationException
	{
	protected:
		qint64 Version_;
	public:
		UnknownVersionException (qint64 version, const QString& what);
		virtual ~UnknownVersionException () throw ();

		virtual const char* what () const throw ();
	};
};

#endif
