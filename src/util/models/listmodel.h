/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef UTIL_LISTMODEL_H
#define UTIL_LISTMODEL_H
#include <QAbstractItemModel>
#include <QStringList>

namespace LeechCraft
{
	namespace Util
	{
		class ListModelItem
		{
		public:
			virtual ~ListModelItem () { }

			virtual QVariant Data (int, int) const = 0;
		};

		class ListModel : public QAbstractItemModel
		{
			Q_OBJECT

			QList<ListModelItem*> Items_;
			QStringList Headers_;
		public:
			enum Roles
			{
				RolePointer = Qt::UserRole + 25
			};

			ListModel (const QStringList& = QStringList (), QObject* = 0);
			virtual ~ListModel ();

			int columnCount (const QModelIndex& = QModelIndex ()) const;
			QVariant data (const QModelIndex&, int = Qt::DisplayRole) const;
			Qt::ItemFlags flags (const QModelIndex&) const;
			QVariant headerData (int, Qt::Orientation, int = Qt::DisplayRole) const;
			QModelIndex index (int, int, const QModelIndex& = QModelIndex ()) const;
			QModelIndex parent (const QModelIndex&) const;
			int rowCount (const QModelIndex& = QModelIndex ()) const;

			void Insert (ListModelItem*, int = -1);
			void Remove (ListModelItem*);
			void Remove (int);
			void Update (ListModelItem*);
			void Update (int);

			void Clear ();

			void SetHeaders (const QStringList&);

			template<typename T>
				QList<T*> GetItems () const
				{
					QList<T*> result;
					Q_FOREACH (ListModelItem *item, Items_)
						result << static_cast<T*> (item);
					return result;
				}
			
			template<typename T>
				T* GetItem (const QModelIndex& index) const
				{
					return GetItem<T> (index.row ());
				}

			template<typename T>
				T* GetItem (int row) const
				{
					return static_cast<T*> (Items_.at (row));
				}
		};

		template<> QList<ListModelItem*> ListModel::GetItems () const;
	};
};

#endif

