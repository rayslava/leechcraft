/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef UTIL_FILEREMOVEGUARD_H
#define UTIL_FILEREMOVEGUARD_H
#include <QFile>
#include "utilconfig.h"

namespace LeechCraft
{
	namespace Util
	{
		/** @brief QFile removing itself from file system on destruction.
		 *
		 * Makes sure that the file represented by this object is
		 * removed when the corresponding instance of this class is
		 * destructed. Useful to automatically remove temporary files,
		 * for example.
		 */
		class UTIL_API FileRemoveGuard : public QFile
		{
		public:
			/** @brief Constructs this file with the given path.
			 *
			 * @param[in] path The file path to construct with.
			 */
			FileRemoveGuard (const QString& path);

			/** @brief Removes the file.
			 *
			 * Tries to close and remove the file represented by this
			 * object.
			 */
			virtual ~FileRemoveGuard ();
		};
	}
}

#endif
