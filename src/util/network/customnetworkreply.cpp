/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "customnetworkreply.h"
#include <cstring>
#include <QTimer>

namespace LeechCraft
{
namespace Util
{
	CustomNetworkReply::CustomNetworkReply (const QUrl& url, QObject *parent)
	: QNetworkReply (parent)
	{
		setUrl (url);
	}

	CustomNetworkReply::~CustomNetworkReply ()
	{
	}

	void CustomNetworkReply::SetError (QNetworkReply::NetworkError error, const QString& text)
	{
		setError (error, text);
	}

	void CustomNetworkReply::SetHeader (QNetworkRequest::KnownHeaders header, const QVariant& value)
	{
		setHeader (header, value);
	}

	void CustomNetworkReply::SetContentType (const QByteArray& ct)
	{
		setHeader (QNetworkRequest::ContentTypeHeader, ct);
	}

	void CustomNetworkReply::SetContent (const QString& content)
	{
		SetContent (content.toUtf8 ());
	}

	void CustomNetworkReply::SetContent (const QByteArray& content)
	{
		Content_ = content;
		Offset_ = 0;

		open (ReadOnly | Unbuffered);

		SetHeader (QNetworkRequest::ContentLengthHeader, QVariant (Content_.size ()));

		QTimer::singleShot (0,
				this,
				SIGNAL (readyRead ()));
		QTimer::singleShot (0,
				this,
				SIGNAL (finished ()));
	}

	void CustomNetworkReply::abort ()
	{
	}

	qint64 CustomNetworkReply::bytesAvailable () const
	{
		return Content_.size () - Offset_;
	}

	bool CustomNetworkReply::isSequential () const
	{
		return true;
	}

	qint64 CustomNetworkReply::readData (char *data, qint64 maxSize)
	{
		if (Offset_ >= Content_.size ())
			return -1;

		qint64 number = std::min (maxSize, bytesAvailable ());
		std::memcpy (data, Content_.constData () + Offset_, number);
		Offset_ += number;

		return number;
	}
}
}
