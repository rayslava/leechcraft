/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "socketerrorstrings.h"
#include <QObject>

namespace LeechCraft
{
namespace Util
{
	QString GetSocketErrorString (QAbstractSocket::SocketError error)
	{
		switch (error)
		{
		case QAbstractSocket::ConnectionRefusedError:
			return QObject::tr ("connection refused");	
		case QAbstractSocket::RemoteHostClosedError:
			return QObject::tr ("remote host closed connection");
		case QAbstractSocket::HostNotFoundError:
			return QObject::tr ("host not found");
		case QAbstractSocket::SocketAccessError:
			return QObject::tr ("socket access error (lacking required privileges)");
		case QAbstractSocket::SocketResourceError:
			return QObject::tr ("system ran out of sockets");
		case QAbstractSocket::SocketTimeoutError:
			return QObject::tr ("socket operation timed out");
		case QAbstractSocket::DatagramTooLargeError:
			return QObject::tr ("datagram too large");
		case QAbstractSocket::NetworkError:
			return QObject::tr ("physical network error");
		case QAbstractSocket::AddressInUseError:
			return QObject::tr ("address already in use");
		case QAbstractSocket::SocketAddressNotAvailableError:
			return QObject::tr ("specified address doesn't belong to the host");
		case QAbstractSocket::UnsupportedSocketOperationError:
			return QObject::tr ("unsupported socket operation");
		case QAbstractSocket::ProxyAuthenticationRequiredError:
			return QObject::tr ("proxy authentication required");
		case QAbstractSocket::SslHandshakeFailedError:
			return QObject::tr ("SSL handshake failed");
		case QAbstractSocket::UnfinishedSocketOperationError:
			return QObject::tr ("unfinished socket operation in progress");
		case QAbstractSocket::ProxyConnectionRefusedError:
			return QObject::tr ("proxy connection has been refused");
		case QAbstractSocket::ProxyConnectionClosedError:
			return QObject::tr ("proxy connection was closed unexpectedly");
		case QAbstractSocket::ProxyConnectionTimeoutError:
			return QObject::tr ("connection to the proxy server timed out");
		case QAbstractSocket::ProxyNotFoundError:
			return QObject::tr ("proxy not found");
		case QAbstractSocket::ProxyProtocolError:
			return QObject::tr ("proxy protocol error");
		case QAbstractSocket::UnknownSocketError:
		default:
			return QObject::tr ("unknown error");
		}
	}
}
}
