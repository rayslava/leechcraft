/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "historyholder.h"
#include <QIcon>
#include <interfaces/entitytesthandleresult.h>
#include "core.h"
#include "findproxy.h"

using namespace LeechCraft::Plugins::HistoryHolder;

void Plugin::Init (ICoreProxy_ptr proxy)
{
	Core::Instance ().SetCoreProxy (proxy);
	connect (&Core::Instance (),
			SIGNAL (gotEntity (const LeechCraft::Entity&)),
			this,
			SIGNAL (gotEntity (const LeechCraft::Entity&)));
}

void Plugin::SecondInit ()
{
}

void Plugin::Release ()
{
	Core::Instance ().Release ();
}

QByteArray Plugin::GetUniqueID () const
{
	return "org.LeechCraft.HistoryHolder";
}

QString Plugin::GetName () const
{
	return "History holder";
}

QString Plugin::GetInfo () const
{
	return tr ("Holds downloads history from various plugins.");
}

QIcon Plugin::GetIcon () const
{
	static QIcon icon ("lcicons:/resources/images/historyholder.svg");
	return icon;
}

QStringList Plugin::Provides () const
{
	return QStringList ("history");
}

QStringList Plugin::GetCategories () const
{
	return QStringList ("history");
}

QList<IFindProxy_ptr> Plugin::GetProxy (const LeechCraft::Request& r)
{
	QList<IFindProxy_ptr> result;
	result << IFindProxy_ptr (new FindProxy (r));
	return result;
}

EntityTestHandleResult Plugin::CouldHandle (const LeechCraft::Entity& e) const
{
	Core::Instance ().Handle (e);
	return EntityTestHandleResult ();
}

void Plugin::Handle (LeechCraft::Entity)
{
}

void Plugin::SetShortcut (const QString& id, const QKeySequences_t& seqs)
{
	Core::Instance ().SetShortcut (id, seqs);
}

QMap<QString, LeechCraft::ActionInfo> Plugin::GetActionInfo () const
{
	return Core::Instance ().GetActionInfo ();
}

void Plugin::handleTasksTreeActivated (const QModelIndex& index)
{
	Core::Instance ().handleTasksTreeActivated (index);
}

LC_EXPORT_PLUGIN (leechcraft_historyholder, Plugin);

