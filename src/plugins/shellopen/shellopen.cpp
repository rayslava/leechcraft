/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "shellopen.h"
#include <QIcon>
#include <QDesktopServices>
#include <QUrl>
#include <QFileInfo>
#include <QMessageBox>
#include <QMainWindow>
#include <interfaces/entitytesthandleresult.h>
#include <util/util.h>
#include <util/notificationactionhandler.h>

namespace LeechCraft
{
	namespace Plugins
	{
		namespace ShellOpen
		{
			void Plugin::Init (ICoreProxy_ptr proxy)
			{
				Translator_.reset (Util::InstallTranslator ("shellopen"));

				Proxy_ = proxy;
			}

			void Plugin::SecondInit ()
			{
			}

			QByteArray Plugin::GetUniqueID () const
			{
				return "org.LeechCraft.ShellOpen";
			}

			void Plugin::Release ()
			{
			}

			QString Plugin::GetName () const
			{
				return "ShellOpen";
			}

			QString Plugin::GetInfo () const
			{
				return tr ("Allows one to open files and otherwise handle entities with external applications.");
			}

			QIcon Plugin::GetIcon () const
			{
				return QIcon ();
			}

			EntityTestHandleResult Plugin::CouldHandle (const LeechCraft::Entity& e) const
			{
				if (!(e.Parameters_ & FromUserInitiated) || !(e.Parameters_ & IsDownloaded))
					return EntityTestHandleResult ();

				if (!e.Entity_.canConvert<QUrl> ())
					return EntityTestHandleResult ();

				if (e.Mime_.startsWith ("x-leechcraft/"))
					return EntityTestHandleResult ();

				const QUrl& url = e.Entity_.toUrl ();
				if (url.scheme () != "file")
					return EntityTestHandleResult ();

				if (!QFileInfo (url.toLocalFile ()).exists ())
					return EntityTestHandleResult ();

				return EntityTestHandleResult (EntityTestHandleResult::PNormal);
			}

			void Plugin::Handle (LeechCraft::Entity e)
			{
				QUrl url = e.Entity_.toUrl ();

				Entity notif = Util::MakeNotification ("ShellOpen",
						tr ("%1 just finished downloading.")
							.arg (url.toLocalFile ()),
						PInfo_);
				Util::NotificationActionHandler *nh =
						new Util::NotificationActionHandler (notif);
				nh->AddFunction (tr ("Open"), [url] () { QDesktopServices::openUrl (url); });

				emit gotEntity (notif);
			}
		};
	};
};

LC_EXPORT_PLUGIN (leechcraft_shellopen, LeechCraft::Plugins::ShellOpen::Plugin);
