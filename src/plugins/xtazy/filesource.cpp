/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "filesource.h"
#include <QFile>
#include <QtDebug>
#include <interfaces/media/audiostructs.h>
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Xtazy
{
	FileSource::FileSource (QObject *parent)
	: TuneSourceBase (parent)
	{
		setObjectName ("FileSource");
		connect (&Watcher_,
				SIGNAL (fileChanged (const QString&)),
				this,
				SLOT (handleFileChanged (const QString&)),
				Qt::QueuedConnection);

		XmlSettingsManager::Instance ().RegisterObject ("FileSourcePath",
				this, "handleFilePathChanged");
		handleFilePathChanged ();
	}

	void FileSource::handleFileChanged (const QString& filePath)
	{
		QFile file (filePath);
		if (!file.exists () ||
				!file.open (QIODevice::ReadOnly))
		{
			emit tuneInfoChanged (Media::AudioInfo ());
			return;
		}

		const QString& data = QString::fromUtf8 (file.readAll ());
		if (data.isEmpty ())
		{
			emit tuneInfoChanged (Media::AudioInfo ());
			return;
		}

		QVariantMap result;
		Q_FOREACH (QString line, data.split ('\n', QString::SkipEmptyParts))
		{
			line = line.trimmed ();
			const int idx = line.indexOf (' ');
			if (idx == -1)
				continue;

			const QString& key = line.left (idx);
			const QString& val = line.mid (idx + 1);
			result [key.toLower ()] = val;
		}

		emit tuneInfoChanged (FromMPRISMap (result));
	}

	void FileSource::handleFilePathChanged ()
	{
		const QStringList& watched = Watcher_.files ();
		if (!watched.isEmpty ())
			Watcher_.removePaths (watched);

		const QString& path = XmlSettingsManager::Instance ()
				.property ("FileSourcePath").toString ();
		if (path.isEmpty ())
			return;

		Watcher_.addPath (path);
		handleFileChanged (path);
	}
}
}
