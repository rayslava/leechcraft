/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "dlniwe.h"
#include <QIcon>
#include <QtDebug>
#include <HUpnpCore/HDeviceHostConfiguration>
#include <HUpnpCore/HDeviceHost>
#include <HUpnpCore/HDeviceInfo>
#include <HUpnpCore/HServerDevice>
#include <HUpnpCore/HServerService>
#include <HUpnpAv/HAvDeviceModelCreator>
#include <HUpnpAv/HMediaServerDeviceConfiguration>
#include <HUpnpAv/HContentDirectoryServiceConfiguration>
#include <HUpnpAv/HCdsDataSource>
#include <HUpnpAv/HFileSystemDataSource>
#include <HUpnpAv/HFileSystemDataSourceConfiguration>
#include <HUpnpAv/HRootDir>
#include <util/sys/paths.h>
#include <xmlsettingsdialog/xmlsettingsdialog.h>
#include "xmlsettingsmanager.h"
#include "fspathsmanager.h"

namespace LeechCraft
{
namespace DLNiwe
{
	namespace HU = Herqq::Upnp;
	namespace HAV = Herqq::Upnp::Av;

	void Plugin::Init (ICoreProxy_ptr)
	{
		const auto& path = Util::GetSysPath (Util::SysPath::Share, "dlniwe/desc", "device.xml");
		if (path.isEmpty ())
		{
			qWarning () << Q_FUNC_INFO
					<< "cannot find device description XML file.";
			return;
		}

		XSD_.reset (new Util::XmlSettingsDialog);
		XSD_->RegisterObject (&XmlSettingsManager::Instance (), "dlniwesettings.xml");

		HU::HDeviceConfiguration devConf;
		devConf.setPathToDeviceDescription (path);

		HAV::HAvDeviceModelCreator avCreator;
		HAV::HMediaServerDeviceConfiguration msConfig;

		auto fsSource = new HAV::HFileSystemDataSource ({});
		HAV::HContentDirectoryServiceConfiguration cdsConfig;
		cdsConfig.setDataSource (fsSource, true);
		msConfig.setContentDirectoryConfiguration (cdsConfig);

		avCreator.setMediaServerConfiguration (msConfig);

		HU::HDeviceHostConfiguration hostConf (devConf);
		hostConf.setDeviceModelCreator (avCreator);

		auto host = new HU::HDeviceHost ();
		if (!host->init (hostConf))
			qWarning () << Q_FUNC_INFO
					<< host->errorDescription ();

		auto pathsMgr = new FSPathsManager (fsSource);
		XSD_->SetDataSource ("RootPathsView", pathsMgr->GetModel ());
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.DLNiwe";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "DLNiwe";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("DLNA server plugin.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	Util::XmlSettingsDialog_ptr Plugin::GetSettingsDialog () const
	{
		return XSD_;
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_dlniwe, LeechCraft::DLNiwe::Plugin);
