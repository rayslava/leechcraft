/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "shooterdialog.h"
#include <QPushButton>
#include <QtDebug>
#include <util/xpc/util.h>
#include <interfaces/idatafilter.h>
#include <interfaces/iinfo.h>
#include "util.h"

namespace LeechCraft
{
namespace Auscrie
{
	ShooterDialog::ShooterDialog (ICoreProxy_ptr proxy, QWidget *parent)
	: QDialog (parent)
	, Proxy_ (proxy)
	{
		Ui_.setupUi (this);
		on_Format__currentIndexChanged (Ui_.Format_->currentText ());

		auto button = new QPushButton (tr ("Make screenshot"));
		Ui_.ButtonBox_->addButton (button, QDialogButtonBox::ApplyRole);
		connect (button,
				SIGNAL (released ()),
				this,
				SIGNAL (screenshotRequested ()));
	}

	ShooterDialog::Action ShooterDialog::GetAction () const
	{
		return Ui_.ActionBox_->currentIndex () == Ui_.ActionBox_->count () - 1 ?
				Action::Save :
				Action::Upload;
	}

	ShooterDialog::Mode ShooterDialog::GetMode () const
	{
		switch (Ui_.ModeBox_->currentIndex ())
		{
		case 0:
			return Mode::LCWindowOverlay;
		case 1:
			return Mode::LCWindow;
		case 2:
			return Mode::CurrentScreen;
		case 3:
			return Mode::WholeDesktop;
		default:
			qWarning () << Q_FUNC_INFO
					<< Ui_.ModeBox_->currentIndex ()
					<< "unhandled";
			return Mode::LCWindowOverlay;
		}
	}

	bool ShooterDialog::ShouldHide () const
	{
		return Ui_.HideThis_->checkState () == Qt::Checked;
	}

	int ShooterDialog::GetTimeout () const
	{
		return Ui_.Timeout_->value ();
	}

	QString ShooterDialog::GetFormat () const
	{
		return Ui_.Format_->currentText ();
	}

	int ShooterDialog::GetQuality () const
	{
		const int val = Ui_.QualityBox_->value ();
		return Ui_.Format_->currentText () == "JPG" ?
				val :
				100 - val;
	}

	ShooterDialog::FilterData ShooterDialog::GetDFInfo () const
	{
		return Filters_.value (Ui_.ActionBox_->currentIndex ());
	}

	void ShooterDialog::SetScreenshot (const QPixmap& px)
	{
		CurrentScreenshot_ = px;
		RescaleLabel ();

		Ui_.ActionBox_->clear ();
		Filters_.clear ();

		const auto& selected = RestoreFilterState ();

		const auto& image = px.toImage ();
		const auto& filters = Util::GetDataFilters (image, Proxy_->GetEntityManager ());
		for (auto filter : filters)
		{
			auto idf = qobject_cast<IDataFilter*> (filter);
			const auto& verb = idf->GetFilterVerb ();

			const auto& pluginId = qobject_cast<IInfo*> (filter)->GetUniqueID ();

			for (const auto& var : idf->GetFilterVariants ())
			{
				Filters_.append ({ filter, var.ID_ });
				Ui_.ActionBox_->addItem (QString ("%1: %2").arg (verb).arg (var.Name_));

				if (pluginId == selected.PluginId_ &&
						var.ID_ == selected.Variant_)
					Ui_.ActionBox_->setCurrentIndex (Ui_.ActionBox_->count () - 1);
			}
		}
		Ui_.ActionBox_->addItem (tr ("save"));
	}

	QPixmap ShooterDialog::GetScreenshot () const
	{
		return CurrentScreenshot_;
	}

	void ShooterDialog::resizeEvent (QResizeEvent *e)
	{
		QDialog::resizeEvent (e);

		RescaleLabel ();
	}

	void ShooterDialog::RescaleLabel ()
	{
		const auto& scaled = CurrentScreenshot_.scaled (Ui_.ScreenshotLabel_->size (),
				Qt::KeepAspectRatio, Qt::SmoothTransformation);
		Ui_.ScreenshotLabel_->setPixmap (scaled);
	}

	void ShooterDialog::on_Format__currentIndexChanged (const QString& str)
	{
		if (str == "JPG")
			Ui_.SettingLabel_->setText ("Quality:");
		else
			Ui_.SettingLabel_->setText ("Compression:");
	}
}
}
