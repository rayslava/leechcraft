/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "eventattendmarker.h"
#include <QMap>
#include <QNetworkReply>
#include <QNetworkAccessManager>
#include <QtDebug>
#include "authenticator.h"
#include "util.h"

namespace LeechCraft
{
namespace Lastfmscrobble
{
	EventAttendMarker::EventAttendMarker (Authenticator *auth, QNetworkAccessManager *nam, qint64 id, Media::EventAttendType type, QObject *parent)
	: QObject (parent)
	, NAM_ (nam)
	, ID_ (id)
	, Code_ (0)
	{
		switch (type)
		{
		case Media::EventAttendType::None:
			Code_ = 2;
			break;
		case Media::EventAttendType::Maybe:
			Code_ = 1;
			break;
		case Media::EventAttendType::Surely:
			Code_ = 0;
			break;
		}

		if (auth->IsAuthenticated ())
			mark ();
		else
			connect (auth,
					SIGNAL (authenticated ()),
					this,
					SLOT (mark ()));
	}

	void EventAttendMarker::mark ()
	{
		QMap<QString, QString> params;
		params ["event"] = QString::number (ID_);
		params ["status"] = QString::number (Code_);
		auto reply = Request ("event.attend", NAM_, params);
		connect (reply,
				SIGNAL (finished ()),
				this,
				SLOT (handleFinished ()));
		connect (reply,
				SIGNAL (error (QNetworkReply::NetworkError)),
				this,
				SLOT (handleError ()));
	}

	void EventAttendMarker::handleFinished ()
	{
		sender ()->deleteLater ();
		emit finished ();
		deleteLater ();
	}

	void EventAttendMarker::handleError ()
	{
		sender ()->deleteLater ();
		qWarning () << Q_FUNC_INFO
				<< "error marking event";
		deleteLater ();
	}
}
}
