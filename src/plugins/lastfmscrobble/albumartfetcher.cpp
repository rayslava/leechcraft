/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "albumartfetcher.h"
#include <QNetworkReply>
#include <QNetworkRequest>
#include <QNetworkAccessManager>
#include <QDomDocument>
#include <QStringList>
#include "util.h"

namespace LeechCraft
{
namespace Lastfmscrobble
{
	AlbumArtFetcher::AlbumArtFetcher (const Media::AlbumInfo& albumInfo, ICoreProxy_ptr proxy, QObject *parent)
	: QObject (parent)
	, Proxy_ (proxy)
	{
		QMap<QString, QString> params;
		params ["artist"] = albumInfo.Artist_;
		params ["album"] = albumInfo.Album_;
		params ["autocorrect"] = "1";
		auto reply = Request ("album.getInfo", proxy->GetNetworkAccessManager (), params);
		reply->setProperty ("AlbumInfo", QVariant::fromValue (albumInfo));
		connect (reply,
				SIGNAL (finished ()),
				this,
				SLOT (handleReplyFinished ()));
	}

	void AlbumArtFetcher::handleReplyFinished ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		reply->deleteLater ();

		const auto& albumInfo = reply->property ("AlbumInfo").value<Media::AlbumInfo> ();
		QDomDocument doc;
		if (!doc.setContent (reply->readAll ()))
		{
			emit gotAlbumArt (albumInfo, QList<QImage> ());
			deleteLater ();
			return;
		}

		const auto& elems = doc.elementsByTagName ("image");
		QStringList sizes;
		sizes << "mega"
				<< "extralarge"
				<< "large"
				<< "medium"
				<< "small"
				<< "";
		while (!sizes.isEmpty ())
		{
			const auto& size = sizes.takeFirst ();
			for (int i = 0; i < elems.size (); ++i)
			{
				const auto& elem = elems.at (i).toElement ();
				if (elem.attribute ("size") != size)
					continue;

				const auto& text = elem.text ();
				if (text.isEmpty ())
					continue;

				QNetworkRequest req (QUrl (elem.text ()));
				req.setPriority (QNetworkRequest::LowPriority);
				auto imageReply = Proxy_->GetNetworkAccessManager ()->get (req);
				imageReply->setProperty ("AlbumInfo", reply->property ("AlbumInfo"));
				connect (imageReply,
						SIGNAL (finished ()),
						this,
						SLOT (handleImageReplyFinished ()));
				return;
			}
		}

		emit gotAlbumArt (albumInfo, QList<QImage> ());
		deleteLater ();
	}

	void AlbumArtFetcher::handleImageReplyFinished ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		reply->deleteLater ();
		deleteLater ();

		auto albumInfo = reply->property ("AlbumInfo").value<Media::AlbumInfo> ();
		QImage image;
		image.loadFromData (reply->readAll ());
		if (!image.isNull ())
			emit gotAlbumArt (albumInfo, QList<QImage> () << image);
	}
}
}
