/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2011  Minh Ngo
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <QObject>
#include <QString>
#include <QVariant>
#include <QMap>
#include "lastfmheaders.h"

class QTimer;

namespace lastfm
{
	class Audioscrobbler;
}

namespace Media
{
	struct AudioInfo;
}

class QNetworkAccessManager;

namespace LeechCraft
{
namespace Lastfmscrobble
{
	struct MediaMeta
	{
		QString Artist_, Album_, Title_, Genre_, Date_;
		int TrackNumber_;
		int Length_;

		MediaMeta ();
		explicit MediaMeta (const QMap<QString, QVariant>& tagMap);
		explicit MediaMeta (const Media::AudioInfo& tagMap);
	};

	class LastFMSubmitter : public QObject
	{
		Q_OBJECT

		std::shared_ptr<lastfm::Audioscrobbler> Scrobbler_;

		QNetworkAccessManager *NAM_;

		QTimer *SubmitTimer_;

		lastfm::MutableTrack NextSubmit_;
	public:
		LastFMSubmitter (QObject *parent = 0);

		void Init (QNetworkAccessManager *manager);
		bool IsConnected () const;

		void NowPlaying (const MediaMeta&);
		void Love ();
		void Ban ();
		void Clear ();
	public slots:
		void submit ();
		void handleAuthenticated ();
	private slots:
		void handleNPError (int, const QString&);
		void cacheAndSubmit ();
	signals:
		void status (int code);
		void authFailure ();
	};
}
}
