/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "manifest.h"
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QtDebug>
#include <qjson/parser.h>

namespace LeechCraft
{
namespace SB2
{
	const int IconSize = 32;

	Manifest::Manifest (const QString& path)
	: QuarkPath_ { path }
	, ID_ { QFileInfo { path }.baseName () }
	, Name_ { ID_ }
	, Icon_ { QIcon::fromTheme ("applications-science") }
	{
		QFile file { path + ".manifest" };
		if (!file.open (QIODevice::ReadOnly))
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to open manifest file"
					<< file.errorString ();
			return;
		}

		QJson::Parser parser;
		bool ok = false;
		const auto& varMap = parser.parse (&file, &ok).toMap ();
		if (!ok)
		{
			qWarning () << Q_FUNC_INFO
					<< "failed to parse manifest for"
					<< path
					<< parser.errorLine ()
					<< parser.errorString ();
			return;
		}

		Name_ = varMap ["quarkName"].toString ();
		Areas_ = varMap ["areas"].toStringList ();

		Description_ = varMap ["description"].toString ();

		if (varMap.contains ("quarkID"))
			ID_ = varMap ["quarkID"].toString ();

		IsHiddenByDefault_ = !varMap.value ("defaultVisibility", true).toBool ();

		if (varMap.contains ("icon"))
		{
			const auto& iconName = varMap ["icon"].toString ();
			TryFullImage (iconName) || TryTheme (iconName) || TryLC (iconName);
		}
	}

	QString Manifest::GetID () const
	{
		return ID_;
	}

	QString Manifest::GetName () const
	{
		return Name_;
	}

	QIcon Manifest::GetIcon () const
	{
		return Icon_;
	}

	QString Manifest::GetDescription () const
	{
		return Description_;
	}

	QStringList Manifest::GetAreas () const
	{
		return Areas_;
	}

	bool Manifest::IsHiddenByDefault () const
	{
		return IsHiddenByDefault_;
	}

	bool Manifest::TryFullImage (const QString& iconName)
	{
		const auto& dirName = QFileInfo { QuarkPath_ }.absoluteDir ().path ();
		const auto& fullName = dirName + '/' + iconName;

		const QPixmap px (fullName);
		if (px.isNull ())
			return false;

		Icon_ = QIcon {};
		Icon_.addPixmap (px);
		return true;
	}

	bool Manifest::TryTheme (const QString& iconName)
	{
		const auto& icon = QIcon::fromTheme (iconName);
		const auto& px = icon.pixmap (IconSize, IconSize);
		if (px.isNull ())
			return false;

		Icon_ = icon;
		return true;
	}

	bool Manifest::TryLC (const QString& iconName)
	{
		if (iconName != "leechcraft")
			return false;

		Icon_ = QIcon {};
		Icon_.addFile ("lcicons:/resources/images/leechcraft.svg");
		return true;
	}
}
}
