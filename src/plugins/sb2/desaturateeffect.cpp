/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "desaturateeffect.h"
#include <limits>
#include <cmath>
#include <QPainter>

namespace LeechCraft
{
namespace SB2
{
	DesaturateEffect::DesaturateEffect (QObject *parent)
	: QGraphicsEffect (parent)
	, Strength_ (0)
	{
	}

	qreal DesaturateEffect::GetStrength () const
	{
		return Strength_;
	}

	void DesaturateEffect::SetStrength (qreal strength)
	{
		if (std::fabs (strength - Strength_) < std::numeric_limits<qreal>::epsilon ())
			return;

		Strength_ = strength;
		emit strengthChanged ();

		update ();
	}

	void DesaturateEffect::draw (QPainter *painter)
	{
		QPoint offset;
		auto px = sourcePixmap (Qt::DeviceCoordinates, &offset);

		const auto restoreTransform = painter->worldTransform ();
		painter->setWorldTransform (QTransform ());

		if (std::fabs (Strength_) >= std::numeric_limits<qreal>::epsilon ())
		{
			auto img = px.toImage ();
			for (int y = 0; y < img.height (); ++y)
				for (int x = 0; x < img.width (); ++x)
				{
					const auto color = img.pixel (x, y);
					const auto grayPart = qGray (color) * Strength_;
					const auto r = qRed (color) * (1 - Strength_) + grayPart;
					const auto g = qGreen (color) * (1 - Strength_) + grayPart;
					const auto b = qBlue (color) * (1 - Strength_) + grayPart;
					img.setPixel (x, y, qRgba (r, g, b, qAlpha (color)));
				}

			painter->drawImage (offset, img);
		}
		else
			painter->drawPixmap (offset, px);

		painter->setWorldTransform (restoreTransform);
	}
}
}
