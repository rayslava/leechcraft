/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "quarksettingsmanager.h"
#include <QCoreApplication>
#include <QDeclarativeContext>
#include <QFileInfo>
#include <QtDebug>

namespace LeechCraft
{
namespace SB2
{
	QuarkSettingsManager::QuarkSettingsManager (const QUrl& url, QDeclarativeContext *ctx)
	: QuarkURL_ (url)
	, Ctx_ (ctx)
	{
		Util::BaseSettingsManager::Init ();

		Ctx_->setContextProperty (QFileInfo (QuarkURL_.path ()).baseName () + "_Settings", this);
	}

	void QuarkSettingsManager::setSettingsValue (const QString& key, const QVariant& value)
	{
		auto s = GetSettings ();
		s->setValue (key, value);

		PropertyChanged (key, value);
	}

	QSettings* QuarkSettingsManager::BeginSettings () const
	{
		auto settings = new QSettings (QCoreApplication::organizationName (),
				QCoreApplication::applicationName () + "_SB2_Quarks");
		settings->beginGroup (QFileInfo (QuarkURL_.path ()).fileName ());
		return settings;
	}

	void QuarkSettingsManager::EndSettings (QSettings *settings) const
	{
		settings->endGroup ();
	}

	namespace
	{
		bool TryDouble (QVariant& val)
		{
			bool ok = false;
			const auto& tempVal = val.toDouble (&ok);
			if (ok)
				val = tempVal;

			return ok;
		}

		bool TryInt (QVariant& val)
		{
			bool ok = false;
			const auto& tempVal = val.toInt (&ok);
			if (ok)
				val = tempVal;

			return ok;
		}
	}

	void QuarkSettingsManager::PropertyChanged (const QString& name, const QVariant& srcVal)
	{
		QVariant val = srcVal;
		if (val.type () == QVariant::String)
		{
			if (val == "true" || val == "false")
				val = val.toBool ();
			else
				TryDouble (val) || TryInt (val);
		}
		Ctx_->setContextProperty (name.toUtf8 ().constData (), val);
	}
}
}
