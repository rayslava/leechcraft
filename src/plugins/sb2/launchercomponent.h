/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QObject>
#include <QPointer>
#include <QSet>
#include <interfaces/iquarkcomponentprovider.h>
#include <interfaces/core/icoreproxy.h>

class QStandardItemModel;
class QStandardItem;
class IHaveTabs;

namespace LeechCraft
{
struct TabClassInfo;
class QuarkComponent;

namespace SB2
{
	class ViewManager;
	class TabClassImageProvider;
	class TabListView;

	class LauncherComponent : public QObject
	{
		Q_OBJECT

		ICoreProxy_ptr Proxy_;
		ICoreTabWidget *ICTW_;
		QStandardItemModel *Model_;
		QuarkComponent_ptr Component_;

		ViewManager *View_;

		TabClassImageProvider *ImageProv_;
		QHash<QByteArray, IHaveTabs*> TC2Obj_;
		QHash<QByteArray, QList<QStandardItem*>> TC2Items_;
		QHash<QByteArray, QList<QWidget*>> TC2Widgets_;

		QPointer<TabListView> CurrentTabList_;

		QSet<QByteArray> HiddenTCs_;

		bool FirstRun_;
	public:
		LauncherComponent (ICoreTabWidget*, ICoreProxy_ptr, ViewManager*, QObject* = 0);

		QuarkComponent_ptr GetComponent () const;
	private:
		void SaveHiddenTCs () const;
		void LoadHiddenTCs ();

		QStandardItem* TryAddTC (const TabClassInfo&);
		QStandardItem* CreateItem (const TabClassInfo&);

		QPair<TabClassInfo, IHaveTabs*> FindTC (const QByteArray&) const;
	public slots:
		void handlePluginsAvailable ();

		void tabOpenRequested (const QByteArray&);
		void tabClassHideRequested (const QByteArray&);
		void tabClassUnhideRequested (const QByteArray&);
		void tabUnhideListRequested (int, int);
		void tabListRequested (const QByteArray&, int, int);
		void tabListUnhovered (const QByteArray&);
	private slots:
		void handleNewTab (const QString&, QWidget*);
		void handleRemoveTab (QWidget*);
		void handleCurrentTabChanged (int);
	};
}
}
