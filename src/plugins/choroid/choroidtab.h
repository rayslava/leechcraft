/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 * Copyright (C) 2011 ForNeVeR
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <functional>
#include <QWidget>
#include <QDeclarativeView>
#include <interfaces/ihavetabs.h>
#include <interfaces/core/icoreproxy.h>
#include "ui_choroidtab.h"

class QFileSystemModel;
class QStandardItemModel;
class QStandardItem;
class QFileInfo;
class QDeclarativeView;

namespace LeechCraft
{
namespace Choroid
{
	class QMLItemModel;

	class ChoroidTab : public QWidget
					 , public ITabWidget
	{
		Q_OBJECT
		Q_INTERFACES (ITabWidget);

		const TabClassInfo TabClass_;
		QObject *Parent_;
		ICoreProxy_ptr Proxy_;

		Ui::ChoroidTab Ui_;

		QDeclarativeView *DeclView_;

		QMLItemModel *QMLFilesModel_;

		QFileSystemModel *FSModel_;
		QStandardItemModel *FilesModel_;

		QUrl CurrentImage_;

		QToolBar *Bar_;
		QMenu *SortMenu_;

		enum CustomRoles
		{
			CRFilePath = Qt::UserRole + 1
		};

		enum ImagesListRoles
		{
			ILRFilename = Qt::UserRole + 1,
			ILRImage,
			ILRFileSize
		};

		std::function<bool (const QFileInfo&, const QFileInfo&)> CurrentSorter_;
	public:
		ChoroidTab (const TabClassInfo&, ICoreProxy_ptr, QObject*);
		~ChoroidTab ();

		TabClassInfo GetTabClassInfo () const;
		QObject* ParentMultiTabs ();
		void Remove ();
		QToolBar* GetToolBar () const;
	private:
		void LoadQML ();
		void SetSortMenu ();
		void ShowImage (const QString&);
		void ShowImage (const QUrl&);
		QStandardItem* FindFileItem (const QString&);
	private slots:
		void sortByName ();
		void sortByDate ();
		void sortBySize ();
		void sortByNumber ();

		void reload ();

		void handleDirTreeCurrentChanged (const QModelIndex&);
		void handleFileChanged (const QModelIndex&);

		void handleQMLImageSelected (const QString&);
		void showNextImage ();
		void showPrevImage ();
		void goUp ();

		void handleStatusChanged (QDeclarativeView::Status);
	signals:
		void removeTab (QWidget*);
	};
}
}
