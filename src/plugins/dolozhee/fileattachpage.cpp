/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "fileattachpage.h"
#include "reportwizard.h"
#include <QStandardItemModel>
#include <QFileDialog>
#include <util/util.h>

namespace LeechCraft
{
namespace Dolozhee
{
	FileAttachPage::FileAttachPage (QWidget *page)
	: QWizardPage (page)
	, Model_ (new QStandardItemModel (this))
	{
		Ui_.setupUi (this);

		Model_->setHorizontalHeaderLabels ({ tr ("Path"), tr ("Size"), tr ("Description") });
		Ui_.FilesView_->setModel (Model_);
	}

	int FileAttachPage::nextId () const
	{
		return ReportWizard::PageID::PreviewRequestPage;
	}

	void FileAttachPage::AddFile (const QString& path)
	{
		auto pathItem = new QStandardItem (path);
		pathItem->setEditable (false);

		auto sizeItem = new QStandardItem (Util::MakePrettySize (QFileInfo (path).size ()));
		sizeItem->setEditable (false);

		auto descrItem = new QStandardItem ();
		Model_->appendRow ({ pathItem, sizeItem, descrItem });
	}

	QStringList FileAttachPage::GetFiles () const
	{
		QStringList result;
		for (int i = 0; i < Model_->rowCount (); ++i)
			result << Model_->item (i)->text ();
		return result;
	}

	void FileAttachPage::on_AddFile__released ()
	{
		const auto& paths = QFileDialog::getOpenFileNames (this,
				tr ("Select files to attach"),
				QDir::homePath ());

		for (auto path : paths)
			AddFile (path);
	}

	void FileAttachPage::on_RemoveFile__released ()
	{
		const auto& idx = Ui_.FilesView_->currentIndex ();
		if (!idx.isValid ())
			return;

		Model_->removeRow (idx.row ());
	}
}
}
