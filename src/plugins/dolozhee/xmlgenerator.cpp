/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "xmlgenerator.h"
#include <QXmlStreamWriter>
#include <QFileInfo>

namespace LeechCraft
{
namespace Dolozhee
{
	QByteArray XMLGenerator::RegisterUser (const QString& login, const QString& pass,
			const QString& email, const QString& firstname, const QString& lastname) const
	{
		QByteArray result;

		QXmlStreamWriter w (&result);
		w.writeStartDocument ();
		w.writeStartElement ("user");
		w.writeTextElement ("login", login);
		w.writeTextElement ("password", pass);
		w.writeTextElement ("mail", email);
		w.writeTextElement ("firstname", firstname);
		w.writeTextElement ("lastname", lastname);
		w.writeEndDocument ();

		return result;
	}

	QByteArray XMLGenerator::CreateIssue (const QString& title,
			QString desc, int category,
			ReportTypePage::Type type, ReportTypePage::Priority prio,
			const QList<FileInfo>& files) const
	{
		desc.remove ("\r");

		QByteArray result;

		QXmlStreamWriter w (&result);
		w.writeStartDocument ();
		w.writeStartElement ("issue");
		w.writeTextElement ("subject", title);
		w.writeTextElement ("description", desc);
		w.writeTextElement ("project_id", "1");
		w.writeTextElement ("priority_id", QString::number (static_cast<int> (prio) + 3));
		if (category >= 0)
			w.writeTextElement ("category_id", QString::number (category));
		switch (type)
		{
		case ReportTypePage::Type::Bug:
			w.writeTextElement ("tracker_id", "1");
			break;
		case ReportTypePage::Type::Feature:
			w.writeTextElement ("tracker_id", "2");
			break;
		}

		if (!files.isEmpty ())
		{
			w.writeStartElement ("uploads");
			w.writeAttribute ("type", "array");
			for (const auto& file : files)
			{
				w.writeStartElement ("upload");
				w.writeTextElement ("token", file.Token_);
				w.writeTextElement ("filename", QFileInfo (file.Name_).fileName ());
				w.writeTextElement ("description", file.Description_);
				w.writeTextElement ("content_type", file.Mime_);
				w.writeEndElement ();
			}
			w.writeEndElement ();
		}

		w.writeEndDocument ();

		return result;
	}
}
}
