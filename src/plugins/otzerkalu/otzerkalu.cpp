/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2011  Minh Ngo
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "otzerkalu.h"
#include <QIcon>
#include <QUrl>
#include <interfaces/entitytesthandleresult.h>
#include "otzerkaludialog.h"
#include <interfaces/core/icoreproxy.h>

namespace LeechCraft
{
namespace Otzerkalu
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		Proxy_ = proxy;
		RepresentationModel_ = new QStandardItemModel (this);
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Otzerkalu";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "Otzerkalu";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Otzerkalu allows one to recursively download a web site.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	EntityTestHandleResult Plugin::CouldHandle (const Entity& entity) const
	{
		const bool can = !entity.Entity_.toUrl ().isEmpty () &&
				(entity.Parameters_ & FromUserInitiated) &&
				entity.Additional_.value ("AllowedSemantics").toStringList ().contains ("save");
		return can ?
				EntityTestHandleResult (EntityTestHandleResult::PHigh) :
				EntityTestHandleResult ();
	}

	void Plugin::Handle (Entity entity)
	{
		QUrl dUrl = entity.Entity_.toUrl ();
		if (!dUrl.isValid ())
			return;

		OtzerkaluDialog dialog;
		if (dialog.exec () != QDialog::Accepted)
			return;

		const int id = MirrorIDPool_.GetID ();

		QList<QStandardItem*> row;
		row << new QStandardItem (tr ("Mirroring %1...").arg (dUrl.toString ()));
		row << new QStandardItem ("0/0");
		row << new QStandardItem ();
		RepresentationModel_->appendRow (row);

		row [0]->setData (id, RMirrorId);

		OtzerkaluDownloader *dl = new OtzerkaluDownloader (DownloadParams (dUrl, dialog.GetDir (),
					dialog.GetRecursionLevel (),
					dialog.FetchFromExternalHosts ()),
				id,
				this);

		connect (dl,
				SIGNAL (gotEntity (const LeechCraft::Entity&)),
				this,
				SIGNAL (gotEntity (const LeechCraft::Entity&)));
		connect (dl,
				SIGNAL (delegateEntity (const LeechCraft::Entity&, int*, QObject**)),
				this,
				SIGNAL (delegateEntity (const LeechCraft::Entity&, int*, QObject**)));
		connect (dl,
				SIGNAL (fileDownloaded (int, int)),
				this,
				SLOT (handleFileDownloaded (int, int)));
		connect (dl,
				SIGNAL (mirroringFinished (int)),
				this,
				SLOT (handleMirroringFinished (int)));

		dl->Begin ();
	}

	QAbstractItemModel* Plugin::GetRepresentation () const
	{
		return RepresentationModel_;
	}

	void Plugin::handleFileDownloaded (int id, int count)
	{
		for (int i = 0; i < RepresentationModel_->rowCount (); ++i)
		{
			if (RepresentationModel_->item (i)->data (RMirrorId).toInt () != id)
				continue;

			RepresentationModel_->item (i, 1)->setText (QString ("%1/%2").arg (count).arg ("unknown"));

			return;
		}
	}

	void Plugin::handleMirroringFinished (int id)
	{
		for (int i = 0; i < RepresentationModel_->rowCount (); ++i)
		{
			if (RepresentationModel_->item (i)->data (RMirrorId).toInt () != id)
				continue;

			qDeleteAll (RepresentationModel_->takeRow (i));

			return;
		}
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_otzerkalu, LeechCraft::Otzerkalu::Plugin);
