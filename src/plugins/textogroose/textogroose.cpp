/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "textogroose.h"
#include <QIcon>
#include <QtDebug>
#include <interfaces/iscriptloader.h>
#include <interfaces/core/icoreproxy.h>
#include <interfaces/core/ipluginsmanager.h>
#include <util/util.h>
#include "apiobject.h"

namespace LeechCraft
{
namespace Textogroose
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		const auto& provs = proxy->GetPluginsManager ()->GetAllCastableTo<IScriptLoader*> ();
		for (auto plugin : provs)
		{
			auto ldr = plugin->CreateScriptLoaderInstance ("textogroose");
			ldr->AddGlobalPrefix ();
			ldr->AddLocalPrefix ();
			Loaders_ << ldr;
		}
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Textogroose";
	}

	void Plugin::Release ()
	{
		qDeleteAll (Loaders_);
	}

	QString Plugin::GetName () const
	{
		return "Textogroose";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Script-based song lyrics finder.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	void Plugin::RequestLyrics (const Media::LyricsQuery& query, Media::QueryOptions)
	{
		const auto& map = Util::MakeMap<QString, QVariant> ({
				{ "artist", query.Artist_ },
				{ "album", query.Album_ },
				{ "title", query.Title_ }
			});

		for (const auto ldr : Loaders_)
			for (const auto& scriptName : ldr->EnumerateScripts ())
			{
				auto script = ldr->LoadScript (scriptName);

				auto apiObject = new ApiObject (query, script);

				script->AddQObject (apiObject, "API");
				script->InvokeMethod ("searchLyrics", { map });

				connect (apiObject,
						SIGNAL (finished (ApiObject*, Media::LyricsResults)),
						this,
						SLOT (handleFinished (ApiObject*, Media::LyricsResults)));
			}
	}

	void Plugin::handleFinished (ApiObject *obj, const Media::LyricsResults& results)
	{
		emit gotLyrics (results);
		obj->deleteLater ();
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_textogroose, LeechCraft::Textogroose::Plugin);
