/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AGGREGATOR_DBUPDATETHREADWORKER_H
#define PLUGINS_AGGREGATOR_DBUPDATETHREADWORKER_H
#include <memory>
#include <QObject>
#include <QVariantList>
#include <interfaces/core/ihookproxy.h>
#include "common.h"
#include "channel.h"
#include "feed.h"

namespace LeechCraft
{
struct Entity;

namespace Aggregator
{
	class StorageBackend;

	class DBUpdateThreadWorker : public QObject
	{
		Q_OBJECT

		std::shared_ptr<StorageBackend> SB_;
	public:
		DBUpdateThreadWorker (QObject* = 0);
	private:
		Feed::FeedSettings GetFeedSettings (IDType_t);
		void AddChannel (const Channel_ptr& channel, const Feed::FeedSettings& settings);
		bool AddItem (const Item_ptr& item, const Channel_ptr& channel,
				const QVariantMap& channelDataMap, const Feed::FeedSettings& settings);
		bool UpdateItem (const Item_ptr& item, const Item_ptr& ourItem);
		void NotifyUpdates (int newItems, int updatedItems, const Channel_ptr& channel);
	public slots:
		void toggleChannelUnread (IDType_t channel, bool state);
		void updateFeed (channels_container_t channels, QString url);
	private slots:
		void handleChannelDataUpdated (Channel_ptr);
	signals:
		void channelDataUpdated (IDType_t channelId, IDType_t feedId);
		void gotNewChannel (const ChannelShort&);
		void gotEntity (const LeechCraft::Entity&);
		void itemDataUpdated (Item_ptr, Channel_ptr);
		void itemsRemoved (const QSet<IDType_t>&);

		void hookGotNewItems (LeechCraft::IHookProxy_ptr proxy,
				QVariantList items);
	};
}
}

#endif
