/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "dbusmanager.h"
#include <QIcon>
#include <interfaces/entitytesthandleresult.h>
#include <util/util.h>
#include <xmlsettingsdialog/xmlsettingsdialog.h>
#include "xmlsettingsmanager.h"
#include "core.h"

namespace LeechCraft
{
namespace DBusManager
{
	void DBusManager::Init (ICoreProxy_ptr proxy)
	{
		Translator_.reset (Util::InstallTranslator ("dbusmanager"));

		Core::Instance ().SetProxy (proxy);

		SettingsDialog_.reset (new Util::XmlSettingsDialog ());
		SettingsDialog_->RegisterObject (XmlSettingsManager::Instance (),
				"dbusmanagersettings.xml");
	}

	void DBusManager::SecondInit ()
	{
	}

	void DBusManager::Release ()
	{
		Core::Instance ().Release ();
	}

	QByteArray DBusManager::GetUniqueID () const
	{
		return "org.LeechCraft.DBusManager";
	}

	QString DBusManager::GetName () const
	{
		return "DBus Manager";
	}

	QString DBusManager::GetInfo () const
	{
		return tr ("General DBus support for LeechCraft.");
	}

	QStringList DBusManager::Provides () const
	{
		return { "dbus" };
	}

	QIcon DBusManager::GetIcon () const
	{
		static QIcon icon ("lcicons:/resources/images/dbusmanager.svg");
		return icon;
	}

	std::shared_ptr<Util::XmlSettingsDialog> DBusManager::GetSettingsDialog () const
	{
		return SettingsDialog_;
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_dbusmanager, LeechCraft::DBusManager::DBusManager);
