/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "general.h"
#include <QBuffer>
#include <QPixmap>
#include <QIcon>
#include <interfaces/iinfo.h>
#include <interfaces/core/icoreproxy.h>
#include <interfaces/core/itagsmanager.h>
#include <interfaces/core/ipluginsmanager.h>
#include "core.h"

namespace LeechCraft
{
namespace DBusManager
{
	General::General (QObject *parent)
	: QObject (parent)
	{
	}

	QStringList General::GetLoadedPlugins ()
	{
		QObjectList plugins = Core::Instance ().GetProxy ()->
			GetPluginsManager ()->GetAllPlugins ();
		QStringList result;
		Q_FOREACH (QObject *plugin, plugins)
			result << qobject_cast<IInfo*> (plugin)->GetName ();

		return result;
	}

	QString General::GetDescription (const QString& name)
	{
		QObjectList plugins = Core::Instance ().GetProxy ()->
			GetPluginsManager ()->GetAllPlugins ();
		Q_FOREACH (QObject *plugin, plugins)
		{
			IInfo *ii = qobject_cast<IInfo*> (plugin);
			if (ii->GetName () == name)
				return ii->GetInfo ();
		}

		throw tr ("Not found plugin %1.")
			.arg (name);
	}

	QByteArray General::GetIcon (const QString& name, int dim)
	{
		QObjectList plugins = Core::Instance ().GetProxy ()->
			GetPluginsManager ()->GetAllPlugins ();
		Q_FOREACH (QObject *plugin, plugins)
		{
			IInfo *ii = qobject_cast<IInfo*> (plugin);
			if (ii->GetName () != name)
				continue;

			QIcon icon = ii->GetIcon ();
			QPixmap pixmap = icon.pixmap (dim, dim);
			QBuffer buffer;
			if (!pixmap.save (&buffer, "PNG", 100))
				throw tr ("Could not save icon for plugin %1 to PNG %2x%2")
					.arg (name)
					.arg (dim);
			return buffer.data ();
		}

		throw tr ("Not found plugin %1.")
			.arg (name);
	}
}
}
