/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "staticplaylistmanager.h"
#include <util/util.h>
#include "playlistparsers/m3u.h"

namespace LeechCraft
{
namespace LMP
{
	StaticPlaylistManager::StaticPlaylistManager (QObject *parent)
	: QObject (parent)
	, PlaylistsDir_ (Util::CreateIfNotExists ("lmp/playlists"))
	{
	}

	namespace
	{
		QString GetOnLoadPath ()
		{
			return Util::CreateIfNotExists ("lmp").filePath ("onload.m3u8");
		}
	}

	void StaticPlaylistManager::SetOnLoadPlaylist (const QList<AudioSource>& sources)
	{
		WritePlaylist (GetOnLoadPath (), Playlist (sources));
	}

	QList<AudioSource> StaticPlaylistManager::GetOnLoadPlaylist () const
	{
		return ReadPlaylist (GetOnLoadPath ()).ToSources ();
	}

	namespace
	{
		QString GetFileName (QString playlist)
		{
			playlist.remove ("../").remove ("./").remove ('/');
			return playlist + ".m3u8";
		}
	}

	void StaticPlaylistManager::SaveCustomPlaylist (QString name, const Playlist& sources)
	{
		WritePlaylist (PlaylistsDir_.filePath (GetFileName (name)), sources);
		emit customPlaylistsChanged ();
	}

	QStringList StaticPlaylistManager::EnumerateCustomPlaylists () const
	{
		QStringList result = PlaylistsDir_.entryList (QStringList ("*.m3u8"));
		for (auto i = result.begin (), end = result.end (); i != end; ++i)
			i->chop (5);
		result.sort ();
		return result;
	}

	Playlist StaticPlaylistManager::GetCustomPlaylist (const QString& name) const
	{
		return ReadPlaylist (GetCustomPlaylistPath (name));
	}

	QString StaticPlaylistManager::GetCustomPlaylistPath (const QString& name) const
	{
		return PlaylistsDir_.filePath (GetFileName (name));
	}

	void StaticPlaylistManager::DeleteCustomPlaylist (const QString& name)
	{
		if (PlaylistsDir_.remove (GetFileName (name)))
			emit customPlaylistsChanged ();
	}

	void StaticPlaylistManager::WritePlaylist (const QString& path, const Playlist& sources)
	{
		M3U::Write (path, sources);
	}

	Playlist StaticPlaylistManager::ReadPlaylist (const QString& path) const
	{
		return M3U::Read2Sources (path);
	}
}
}
