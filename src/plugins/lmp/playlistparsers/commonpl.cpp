/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "commonpl.h"
#include <QFileInfo>
#include <QDir>
#include <QUrl>

namespace LeechCraft
{
namespace LMP
{
	Playlist CommonRead2Sources (const ReadParams& params)
	{
		const auto& plDir = QFileInfo (params.Path_).absoluteDir ();

		Playlist result;

		for (const auto& raw : params.RawParser_ (params.Path_))
		{
			const auto& src = raw.SourceStr_;

			QUrl url (src);
			if (!url.scheme ().isEmpty ())
			{
				result.Append ({
						url.scheme () == "file" ? url.toLocalFile () : url,
						raw.Additional_
					});
				continue;
			}

			const QFileInfo fi (src);
			if (params.Suffixes_.contains (fi.suffix ()))
				result += CommonRead2Sources ({ params.Suffixes_,
							plDir.absoluteFilePath (src), params.RawParser_ });
			else if (fi.isRelative ())
				result.Append ({ plDir.absoluteFilePath (src), raw.Additional_ });
			else
				result.Append ({ src, raw.Additional_ });
		}

		return result;
	}
}
}
