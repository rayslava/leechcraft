/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "pls.h"
#include <algorithm>
#include <QSettings>
#include "commonpl.h"

namespace LeechCraft
{
namespace LMP
{
namespace PLS
{
	QList<RawReadData> Read (const QString& path)
	{
		QList<RawReadData> result;

		QSettings settings (path, QSettings::IniFormat);
		settings.beginGroup ("playlist");

		const int numFiles = settings.value ("NumberOfEntries").toInt ();
		for (int i = 1; i <= numFiles; ++i)
		{
			const auto& str = settings.value ("File" + QString::number (i)).toString ();
			if (!str.isEmpty ())
				result.append ({ str, {} });
		}

		settings.endGroup ();

		return result;
	}

	Playlist Read2Sources (const QString& path)
	{
		return CommonRead2Sources ({ { "pls" }, path, Read });
	}
}
}
}
