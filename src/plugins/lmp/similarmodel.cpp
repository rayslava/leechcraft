/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "similarmodel.h"
#include <interfaces/media/audiostructs.h>
#include "core.h"
#include "localcollection.h"

namespace LeechCraft
{
namespace LMP
{
	SimilarModel::SimilarModel (QObject *parent)
	: QStandardItemModel (parent)
	{
		QHash<int, QByteArray> names;
		names [ArtistName] = "artistName";
		names [Similarity] = "similarity";
		names [ArtistImageURL] = "artistImageURL";
		names [ArtistBigImageURL] = "artistBigImageURL";
		names [ArtistPageURL] = "artistPageURL";
		names [ArtistTags] = "artistTags";
		names [ShortDesc] = "shortDesc";
		names [FullDesc] = "fullDesc";
		names [IsInCollection] = "artistInCollection";
		setRoleNames (names);
	}

	QStandardItem* SimilarModel::ConstructItem (const Media::ArtistInfo& artist)
	{
		auto item = new QStandardItem;
		item->setData (artist.Name_, SimilarModel::Role::ArtistName);
		item->setData (artist.Image_, SimilarModel::Role::ArtistImageURL);
		item->setData (artist.LargeImage_, SimilarModel::Role::ArtistBigImageURL);
		item->setData (artist.ShortDesc_, SimilarModel::Role::ShortDesc);
		item->setData (artist.FullDesc_, SimilarModel::Role::FullDesc);
		item->setData (artist.Page_, SimilarModel::Role::ArtistPageURL);

		QStringList tags;
		const int diff = artist.Tags_.size () - 5;
		auto begin = artist.Tags_.begin ();
		if (diff > 0)
			std::advance (begin, diff);
		std::transform (begin, artist.Tags_.end (), std::back_inserter (tags),
				[] (decltype (artist.Tags_.front ()) tag) { return tag.Name_; });
		std::reverse (tags.begin (), tags.end ());
		item->setData (tr ("Tags: %1").arg (tags.join ("; ")), SimilarModel::Role::ArtistTags);

		const auto col = Core::Instance ().GetLocalCollection ();
		item->setData (col->FindArtist (artist.Name_) >= 0, SimilarModel::Role::IsInCollection);

		return item;
	}
}
}
