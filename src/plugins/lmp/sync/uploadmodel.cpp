/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "uploadmodel.h"
#include <QtDebug>

namespace LeechCraft
{
namespace LMP
{
	UploadModel::UploadModel (QObject *parent)
	: QSortFilterProxyModel (parent)
	{
	}

	QSet<QPersistentModelIndex> UploadModel::GetSelectedIndexes () const
	{
		return SourceIndexes_;
	}

	Qt::ItemFlags UploadModel::flags (const QModelIndex& idx) const
	{
		return QSortFilterProxyModel::flags (idx) | Qt::ItemIsUserCheckable;
	}

	QVariant UploadModel::data (const QModelIndex& idx, int role) const
	{
		const auto& var = QSortFilterProxyModel::data (idx, role);
		if (role != Qt::CheckStateRole)
			return var;

		return SourceIndexes_.contains (mapToSource (idx)) ?
				Qt::Checked :
				Qt::Unchecked;
	}

	bool UploadModel::setData (const QModelIndex& idx, const QVariant& data, int role)
	{
		if (role != Qt::CheckStateRole)
			return false;

		if (data.toBool ())
		{
			SourceIndexes_ << mapToSource (idx);
			emit dataChanged (idx, idx);
		}
		else
		{
			auto parent = idx;
			while (parent.isValid ())
			{
				SourceIndexes_.remove (mapToSource (parent));
				emit dataChanged (parent, parent);
				parent = parent.parent ();
			}
		}

		for (int i = 0, rc = rowCount (idx); i < rc; ++i)
			setData (index (i, 0, idx), data, Qt::CheckStateRole);

		return true;
	}

	bool UploadModel::filterAcceptsRow (int, const QModelIndex&) const
	{
		return true;
	}
}
}
