/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "clouduploadmanager.h"
#include <algorithm>
#include <QStringList>
#include <QFileInfo>
#include <QtDebug>
#include <interfaces/lmp/icloudstorageplugin.h>
#include "clouduploader.h"

namespace LeechCraft
{
namespace LMP
{
	CloudUploadManager::CloudUploadManager (QObject *parent)
	: SyncManagerBase (parent)
	{
	}

	void CloudUploadManager::AddFiles (ICloudStoragePlugin *cloud, const QString& account,
			const QStringList& files, const TranscodingParams& params)
	{
		std::for_each (files.begin (), files.end (),
				[this, cloud, &account] (decltype (files.front ()) file)
					{ Source2Params_ [file] = { cloud, account }; });

		SyncManagerBase::AddFiles (files, params);
	}

	void CloudUploadManager::CreateUploader (ICloudStoragePlugin *cloud)
	{
		auto up = new CloudUploader (cloud, this);
		connect (up,
				SIGNAL (startedCopying (QString)),
				this,
				SLOT (handleStartedCopying (QString)));
		connect (up,
				SIGNAL (finishedCopying ()),
				this,
				SLOT (handleFinishedCopying ()));
		Cloud2Uploaders_ [cloud] = up;
	}

	void CloudUploadManager::handleFileTranscoded (const QString& from,
			const QString& transcoded, QString)
	{
		SyncManagerBase::HandleFileTranscoded (from, transcoded);

		const auto& syncTo = Source2Params_.take (from);
		if (syncTo.Account_.isEmpty ())
		{
			qWarning () << Q_FUNC_INFO
					<< "dumb transcoded file detected"
					<< from
					<< transcoded;
			return;
		}

		emit uploadLog (tr ("File %1 successfully transcoded, adding to upload queue for account %2 at service %3...")
				.arg ("<em>" + QFileInfo (from).fileName () + "</em>")
				.arg ("<em>" + syncTo.Cloud_->GetCloudName () + "</em>")
				.arg ("<em>" + syncTo.Account_) + "</em>");

		if (!Cloud2Uploaders_.contains (syncTo.Cloud_))
			CreateUploader (syncTo.Cloud_);
		Cloud2Uploaders_ [syncTo.Cloud_]->Upload ({ from != transcoded, syncTo.Account_, transcoded });
	}
}
}
