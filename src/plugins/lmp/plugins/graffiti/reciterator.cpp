/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "reciterator.h"
#include <QtConcurrentRun>
#include <QFutureWatcher>
#include <interfaces/lmp/ilmpproxy.h>

namespace LeechCraft
{
namespace LMP
{
namespace Graffiti
{
	RecIterator::RecIterator (ILMPProxy_ptr proxy, QObject *parent)
	: QObject { parent }
	, LMPProxy_ { proxy }
	, StopFlag_ { false }
	{
	}

	void RecIterator::Start (const QString& path)
	{
		auto watcher = new QFutureWatcher<QList<QFileInfo>> (this);
		connect (watcher,
				SIGNAL (finished ()),
				this,
				SLOT (handleImplFinished ()));

		const auto& future = QtConcurrent::run ([this, path]
				{ return LMPProxy_->RecIterateInfo (path, true, &StopFlag_); });
		watcher->setFuture (future);
	}

	QList<QFileInfo> RecIterator::GetResult () const
	{
		return Result_;
	}

	void RecIterator::cancel ()
	{
		StopFlag_.store (true, std::memory_order_relaxed);
	}

	void RecIterator::handleImplFinished ()
	{
		auto watcher = dynamic_cast<QFutureWatcher<QList<QFileInfo>>*> (sender ());
		Result_ = watcher->result ();
		watcher->deleteLater ();

		if (StopFlag_)
			emit canceled ();
		else
			emit finished ();
	}
}
}
}
