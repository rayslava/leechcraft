/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "accountsmanager.h"
#include <QStandardItemModel>
#include <QSettings>
#include <QCoreApplication>
#include <xmlsettingsdialog/datasourceroles.h>

namespace LeechCraft
{
namespace LMP
{
namespace MP3Tunes
{
	AccountsManager::AccountsManager (QObject *parent)
	: QObject (parent)
	, AccModel_ (new QStandardItemModel (this))
	{
		AccModel_->setHorizontalHeaderLabels ({ tr ("Account name") });
		AccModel_->horizontalHeaderItem (0)->setData (DataSources::DataFieldType::String, DataSources::DataSourceRole::FieldType);

		LoadAccounts ();
	}

	QAbstractItemModel* AccountsManager::GetAccModel () const
	{
		return AccModel_;
	}

	QStringList AccountsManager::GetAccounts () const
	{
		QStringList result;
		for (int i = 0; i < AccModel_->rowCount (); ++i)
			result << AccModel_->item (i)->text ();
		return result;
	}

	void AccountsManager::SaveAccounts ()
	{
		QSettings settings (QCoreApplication::organizationName (),
				QCoreApplication::applicationName () + "_LMP_MP3Tunes");
		settings.beginGroup ("Accounts");
		settings.beginWriteArray ("List");
		for (int i = 0; i < AccModel_->rowCount (); ++i)
		{
			settings.setArrayIndex (i);
			settings.setValue ("AccName", AccModel_->item (i)->text ());
		}
		settings.endArray ();
		settings.endGroup ();
	}

	void AccountsManager::LoadAccounts ()
	{
		QSettings settings (QCoreApplication::organizationName (),
				QCoreApplication::applicationName () + "_LMP_MP3Tunes");
		settings.beginGroup ("Accounts");
		const int size = settings.beginReadArray ("List");
		for (int i = 0; i < size; ++i)
		{
			settings.setArrayIndex (i);
			const auto& str = settings.value ("AccName").toString ();
			AccModel_->appendRow (new QStandardItem (str));
		}
		settings.endArray ();
		settings.endGroup ();

		emit accountsChanged ();
	}

	void AccountsManager::addRequested (const QString&, const QVariantList& variants)
	{
		const auto& str = variants.value (0).toString ();
		if (str.isEmpty ())
			return;

		AccModel_->appendRow (new QStandardItem (str));

		SaveAccounts ();
		emit accountsChanged ();
	}

	void AccountsManager::removeRequested (const QString&, const QModelIndexList& indices)
	{
		QList<QStandardItem*> items;
		for (const auto& idx : indices)
			items << AccModel_->itemFromIndex (idx);
		items.removeAll (0);

		for (auto item : items)
			AccModel_->removeRow (item->row ());

		SaveAccounts ();

		emit accountsChanged ();
	}
}
}
}
