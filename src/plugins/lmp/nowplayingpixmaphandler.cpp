/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "nowplayingpixmaphandler.h"
#include <QUrl>
#include <QPixmap>
#include <QNetworkAccessManager>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QtDebug>
#include <interfaces/core/icoreproxy.h>
#include "core.h"
#include "mediainfo.h"

namespace LeechCraft
{
namespace LMP
{
	NowPlayingPixmapHandler::NowPlayingPixmapHandler (QObject *parent)
	: QObject (parent)
	, IsValidPixmap_ (false)
	{
	}

	void NowPlayingPixmapHandler::AddSetter (const PixmapSetter_f setter)
	{
		Setters_ << setter;
	}

	void NowPlayingPixmapHandler::HandleSongChanged (const MediaInfo& info,
			const QString& coverPath, const QPixmap& px, bool correct)
	{
		if (coverPath == LastCoverPath_ && correct)
			return;

		if (LastArtist_ == info.Artist_ && IsValidPixmap_ && !correct)
			return;

		LastArtist_ = info.Artist_;
		Q_FOREACH (const auto& setter, Setters_)
			setter (px, coverPath);

		IsValidPixmap_ = correct;
		LastCoverPath_ = coverPath;
	}

	void NowPlayingPixmapHandler::handleGotArtistImage (const QString& name, const QUrl& url)
	{
		if (name != LastArtist_ || !url.isValid ())
			return;

		if (IsValidPixmap_)
			return;

		auto nam = Core::Instance ().GetProxy ()->GetNetworkAccessManager ();
		connect (nam->get (QNetworkRequest (url)),
				SIGNAL (finished ()),
				this,
				SLOT (handleDownloadedImage ()));
	}

	void NowPlayingPixmapHandler::handleDownloadedImage ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		if (!reply)
			return;

		reply->deleteLater ();

		const auto& pixmap = QPixmap::fromImage (QImage::fromData (reply->readAll ()));
		if (pixmap.isNull ())
			return;

		Q_FOREACH (const auto& setter, Setters_)
			setter (pixmap, QString ());

		LastCoverPath_.clear ();
		IsValidPixmap_ = true;
	}
}
}
