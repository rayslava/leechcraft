/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "rgfiltercontroller.h"
#include "engine/path.h"
#include "engine/sourceobject.h"
#include "xmlsettingsmanager.h"
#include "localcollectionstorage.h"

namespace LeechCraft
{
namespace LMP
{
	RGFilterController::RGFilterController (Path *path, QObject *parent)
	: QObject { parent }
	, RGFilter_ { new RGFilter }
	, Path_ { path }
	{
		const QList<QByteArray> rgProps
		{
			"RGAlbumMode",
			"RGLimiting",
			"RGPreamp"
		};
		XmlSettingsManager::Instance ().RegisterObject (rgProps, this, "setRG");
		setRG ();

		const auto srcObj = path->GetSourceObject ();
		connect (srcObj,
				SIGNAL (currentSourceChanged (AudioSource)),
				this,
				SLOT (updateRGData (AudioSource)));
		updateRGData (srcObj->GetCurrentSource ());

		RGFilter_->InsertInto (Path_);
	}

	RGFilterController::~RGFilterController ()
	{
		RGFilter_->RemoveFrom (Path_);
	}

	void RGFilterController::setRG ()
	{
		const auto& xsm = XmlSettingsManager::Instance ();
		RGFilter_->SetAlbumMode (xsm.property ("RGAlbumMode").toBool ());
		RGFilter_->SetPreamp (xsm.property ("RGPreamp").toDouble ());
		RGFilter_->SetLimiterEnabled (xsm.property ("RGLimiting").toBool ());
	}

	void RGFilterController::updateRGData (const AudioSource& source)
	{
		if (!source.IsLocalFile ())
		{
			RGFilter_->SetRG ({});
			return;
		}

		LocalCollectionStorage storage;
		const auto& data = storage.GetRgTrackInfo (source.GetLocalPath ());
		RGFilter_->SetRG (data);
	}
}
}
