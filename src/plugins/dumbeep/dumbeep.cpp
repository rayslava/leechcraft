/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "dumbeep.h"
#include <interfaces/entitytesthandleresult.h>
#include <QIcon>
#include <QUrl>
#include <QFileInfo>
#include <QProcess>

#ifdef WITH_PHONON
#include <phonon/mediaobject.h>
#endif

#include <xmlsettingsdialog/xmlsettingsdialog.h>
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Dumbeep
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		XSD_.reset (new Util::XmlSettingsDialog);
		XSD_->RegisterObject (&XmlSettingsManager::Instance (), "dumbeepsettings.xml");
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Dumbeep";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "Dumbeep";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("A simple audio notification backend for those fearing LMP.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	Util::XmlSettingsDialog_ptr Plugin::GetSettingsDialog () const
	{
		return XSD_;
	}

	namespace
	{
		QString GetPath (const Entity& e)
		{
			QString path = e.Entity_.toString ();
			const QUrl& url = e.Entity_.toUrl ();
			if (path.isEmpty () &&
						url.isValid () &&
						url.scheme () == "file")
				path = url.toLocalFile ();
			return path;
		}
	}

	EntityTestHandleResult Plugin::CouldHandle (const Entity& e) const
	{
		if (!XmlSettingsManager::Instance ().property ("PreferPhonon").toBool () &&
				XmlSettingsManager::Instance ().property ("PlayerCommand").toString ().isEmpty ())
			return EntityTestHandleResult ();

		if (!(e.Parameters_ & Internal))
			return EntityTestHandleResult ();

		const auto& path = GetPath (e);

		if (!path.isEmpty ())
		{
			const QStringList goodExt = { "mp3", "ogg", "wav", "flac" };
			const QFileInfo fi = QFileInfo (path);
			if (fi.exists () && goodExt.contains (fi.suffix ()))
				return EntityTestHandleResult (EntityTestHandleResult::PNormal);
			else
				return EntityTestHandleResult ();
		}

		return EntityTestHandleResult ();
	}

	void Plugin::Handle (Entity e)
	{
		const auto& path = GetPath (e);

		if (XmlSettingsManager::Instance ().property ("PreferPhonon").toBool ())
		{
#ifdef WITH_PHONON
			auto obj = Phonon::createPlayer (Phonon::NotificationCategory, QUrl::fromLocalFile (path));
			obj->play ();
			connect (obj,
					SIGNAL (finished ()),
					obj,
					SLOT (deleteLater ()));
			return;
#endif
		}

		const auto& commandStr = XmlSettingsManager::Instance ()
				.property ("PlayerCommand").toString ();
		const auto& parts = commandStr.split (' ', QString::SkipEmptyParts);
		if (parts.isEmpty ())
			return;

		QProcess::startDetached (parts.at (0), parts.mid (1) << path);
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_dumbeep, LeechCraft::Dumbeep::Plugin);
