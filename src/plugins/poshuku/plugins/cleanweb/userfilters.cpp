/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "userfilters.h"
#include <QPlainTextEdit>
#include <QDialog>
#include <QDialogButtonBox>
#include <QLineEdit>
#include <QFileDialog>
#include <QMessageBox>
#include <QShortcut>
#include "userfiltersmodel.h"
#include "core.h"

namespace LeechCraft
{
namespace Poshuku
{
namespace CleanWeb
{
	UserFilters::UserFilters (QWidget *parent)
	: QWidget (parent)
	{
		Ui_.setupUi (this);
		Ui_.View_->setModel (Core::Instance ()
				.GetUserFiltersModel ());

		QShortcut *sh = new QShortcut (Qt::Key_Delete, Ui_.View_);
		connect (sh,
				SIGNAL (activated ()),
				this,
				SLOT (on_Remove__released ()));
		sh->setContext (Qt::WidgetWithChildrenShortcut);
	}

	void UserFilters::on_Add__released ()
	{
		Core::Instance ().GetUserFiltersModel ()->InitiateAdd ();
	}

	void UserFilters::on_Modify__released ()
	{
		QModelIndex current = Ui_.View_->currentIndex ();
		if (!current.isValid ())
			return;

		Core::Instance ()
			.GetUserFiltersModel ()->Modify (current.row ());
	}

	void UserFilters::on_Remove__released ()
	{
		QModelIndex current = Ui_.View_->currentIndex ();
		if (!current.isValid ())
			return;

		Core::Instance ()
			.GetUserFiltersModel ()->Remove (current.row ());
	}

	namespace
	{
		void AddMulti (const QString& str)
		{
			const auto& list = str.split ("\n", QString::SkipEmptyParts);
			Core::Instance ().GetUserFiltersModel ()->AddMultiFilters (list);
		}
	}

	void UserFilters::on_Paste__released ()
	{
		auto edit = new QPlainTextEdit ();

		QDialog dia (this);
		dia.setWindowTitle (tr ("Paste rules"));
		dia.resize (600, 400);
		dia.setLayout (new QVBoxLayout ());
		dia.layout ()->addWidget (new QLineEdit (tr ("Paste your custom rules here:")));
		dia.layout ()->addWidget (edit);
		auto box = new QDialogButtonBox (QDialogButtonBox::Ok | QDialogButtonBox::Cancel);
		dia.layout ()->addWidget (box);
		connect (box,
				SIGNAL (accepted ()),
				&dia,
				SLOT (accept ()));
		connect (box,
				SIGNAL (rejected ()),
				&dia,
				SLOT (reject ()));

		if (dia.exec () != QDialog::Accepted)
			return;

		AddMulti (edit->toPlainText ());
	}

	void UserFilters::on_Load__released ()
	{
		const QString& filename = QFileDialog::getOpenFileName (this,
				tr ("Load rules"),
				QDir::homePath ());
		if (filename.isEmpty ())
			return;

		QFile file (filename);
		if (!file.open (QIODevice::ReadOnly))
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to open file"
					<< file.fileName ()
					<< file.errorString ();
			QMessageBox::warning (this,
					"LeechCraft",
					tr ("Error opening file %1: %2.")
						.arg (filename)
						.arg (file.errorString ()));
			return;
		}

		AddMulti (file.readAll ());
	}
}
}
}
