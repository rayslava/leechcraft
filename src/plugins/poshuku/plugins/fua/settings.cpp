/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "settings.h"
#include <QStandardItemModel>
#include "fua.h"
#include "changer.h"

namespace LeechCraft
{
namespace Poshuku
{
namespace Fua
{
	Settings::Settings (QStandardItemModel *model, FUA *parent)
	: Fua_ (parent)
	, Model_ (model)
	{
		Ui_.setupUi (this);
		Ui_.Items_->setModel (model);
	}

	void Settings::on_Add__released ()
	{
		Changer changer (Fua_->GetBrowser2ID ());
		if (changer.exec () != QDialog::Accepted)
			return;

		QString domain = changer.GetDomain ();
		QString identification = changer.GetID ();
		QList<QStandardItem*> items;
		items << new QStandardItem (domain)
			<< new QStandardItem (Fua_->GetBrowser2ID ().key (identification))
			<< new QStandardItem (identification);
		Model_->appendRow (items);
		Fua_->Save ();
	}

	void Settings::on_Modify__released ()
	{
		QModelIndex cur = Ui_.Items_->currentIndex ();
		if (!cur.isValid ())
			return;

		QString domain = Model_->item (cur.row (), 0)->text ();
		QString identification = Model_->item (cur.row (), 2)->text ();

		Changer changer (Fua_->GetBrowser2ID (), domain, identification);
		if (changer.exec () != QDialog::Accepted)
			return;

		domain = changer.GetDomain ();
		identification = changer.GetID ();
		QList<QStandardItem*> items;
		Model_->item (cur.row (), 0)->setText (domain);
		Model_->item (cur.row (), 1)->setText (Fua_->GetBrowser2ID ().key (identification));
		Model_->item (cur.row (), 2)->setText (identification);
		Fua_->Save ();
	}

	void Settings::on_Remove__released ()
	{
		QModelIndex cur = Ui_.Items_->currentIndex ();
		if (!cur.isValid ())
			return;

		qDeleteAll (Model_->takeRow (cur.row ()));
		Fua_->Save ();
	}
}
}
}
