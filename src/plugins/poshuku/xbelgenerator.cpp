/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "xbelgenerator.h"
#include <QByteArray>
#include <QDomDocument>
#include <QDomElement>
#include <util/util.h>
#include "core.h"

namespace LeechCraft
{
namespace Poshuku
{
	QString TagGetter (const QDomElement& elem)
	{
		if (elem.tagName () == "folder")
			return elem.firstChildElement ("title").text ();
		else
			return QString ();
	}

	void TagSetter (QDomDocument& doc,
			QDomElement& elem, const QString& tag)
	{
		QDomElement title = doc.createElement ("title");
		QDomText text = doc.createTextNode (tag);
		title.appendChild (text);
		elem.appendChild (title);
	}

	XbelGenerator::XbelGenerator (QByteArray& output)
	{
		QDomDocument document;
		QDomElement root = document.createElement ("xbel");
		root.setAttribute ("version", "1.0");
		document.appendChild (root);

		auto items = Core::Instance ().GetFavoritesModel ()->GetItems ();
		for (auto i = items.begin (), end = items.end ();
				i != end; ++i)
		{
			QDomElement inserter = Util::GetElementForTags (i->Tags_,
					root, document, "folder", TagGetter,
					[&document] (QDomElement& elem, const QString& tag) { TagSetter (document, elem, tag); });

			QDomElement item = document.createElement ("bookmark");
			item.setAttribute ("href", i->URL_);

			QDomElement title = document.createElement ("title");
			QDomText titleText = document.createTextNode (i->Title_);
			title.appendChild (titleText);
			item.appendChild (title);

			inserter.appendChild (item);
		}

		output = document.toByteArray (4);
	}
}
}
