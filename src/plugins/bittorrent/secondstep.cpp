/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include <QFileDialog>
#include <util/util.h>
#include "secondstep.h"
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
	namespace Plugins
	{
		namespace BitTorrent
		{
			SecondStep::SecondStep (QWidget *parent)
			: QWizardPage (parent)
			{
				setupUi (this);
			}
			
			QStringList SecondStep::GetPaths () const
			{
				QStringList result;
				for (int i = 0; i < FilesWidget_->topLevelItemCount (); ++i)
					result << FilesWidget_->topLevelItem (i)->text (1);
				return result;
			}
			
			void SecondStep::on_AddPath__released ()
			{
				QStringList paths = QFileDialog::getOpenFileNames (this,
						tr ("Select one or more paths to add"),
						XmlSettingsManager::Instance ()->
							property ("LastAddDirectory").toString ());
				if (paths.isEmpty ())
					return;
			
				XmlSettingsManager::Instance ()->setProperty ("LastAddDirectory",
						paths.at (0));
				
				QStringList files = paths;
				for (int i = 0; i < files.size (); ++i)
				{
					QString path = files.at (i);
					QTreeWidgetItem *item = new QTreeWidgetItem (FilesWidget_);
					item->setText (0,
							LeechCraft::Util::MakePrettySize (QFileInfo (path).size ()));
					item->setText (1, path);
				}
			}
			
			void SecondStep::on_RemoveSelected__released ()
			{
				QList<QTreeWidgetItem*> items = FilesWidget_->selectedItems ();
				qDeleteAll (items);
			}
			
			void SecondStep::on_Clear__released ()
			{
				FilesWidget_->clear ();
			}
			
		};
	};
};

