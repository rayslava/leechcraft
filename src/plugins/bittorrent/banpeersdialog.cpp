/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "banpeersdialog.h"
#include "ipvalidators.h"

namespace LeechCraft
{
namespace Plugins
{
namespace BitTorrent
{
	BanPeersDialog::BanPeersDialog (QWidget *parent)
	: QDialog (parent)
	{
		Ui_.setupUi (this);
		Ui_.IP4Start_->setValidator (new ValidateIPv4 (this));
		Ui_.IP4End_->setValidator (new ValidateIPv4 (this));
		Ui_.IP6Start_->setValidator (new ValidateIPv6 (this));
		Ui_.IP6End_->setValidator (new ValidateIPv6 (this));
	}

	void BanPeersDialog::SetIP (const QString& ip)
	{
		if (ip.contains (":"))
		{
			Ui_.RadioIP6_->setChecked (true);
			Ui_.IP6Start_->setText (ip);
			Ui_.IP6End_->setText (ip);
		}
		else
		{
			Ui_.IP4Start_->setText (ip);
			Ui_.IP4End_->setText (ip);
		}
	}

	void BanPeersDialog::SetIP (const QString& first, const QString& last)
	{
		if (first.contains (":"))
		{
			Ui_.RadioIP6_->setChecked (true);
			Ui_.IP6Start_->setText (first);
			Ui_.IP6End_->setText (last);
		}
		else
		{
			Ui_.IP4Start_->setText (first);
			Ui_.IP4End_->setText (last);
		}
	}

	QString BanPeersDialog::GetStart () const
	{
		if (Ui_.IP4Start_->isEnabled ())
			return Ui_.IP4Start_->hasAcceptableInput () ?
				Ui_.IP4Start_->text () :
				QString ();
		else
			return Ui_.IP6Start_->hasAcceptableInput () ?
				Ui_.IP6Start_->text () :
				QString ();
	}

	QString BanPeersDialog::GetEnd () const
	{
		if (Ui_.IP4Start_->isEnabled ())
			return Ui_.IP4End_->hasAcceptableInput () ?
				Ui_.IP4End_->text () :
				QString ();
		else
			return Ui_.IP6End_->hasAcceptableInput () ?
				Ui_.IP6End_->text () :
				QString ();
	}
}
}
}
