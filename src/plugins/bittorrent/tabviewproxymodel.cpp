/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "tabviewproxymodel.h"
#include <interfaces/core/icoreproxy.h>
#include <interfaces/core/itagsmanager.h>
#include "core.h"

namespace LeechCraft
{
namespace Plugins
{
namespace BitTorrent
{
	TabViewProxyModel::TabViewProxyModel (QObject *parent)
	: QSortFilterProxyModel (parent)
	, StateFilter_ (StateFilterMode::All)
	{
	}

	bool TabViewProxyModel::filterAcceptsRow (int row, const QModelIndex&) const
	{
		const auto& idx = Core::Instance ()->index (row, Core::ColumnName);
		const auto& h = Core::Instance ()->GetTorrentHandle (idx.row ());
		const auto state = h.status ().state;

		switch (StateFilter_)
		{
		case StateFilterMode::All:
			break;
		case StateFilterMode::Downloading:
			if (state != libtorrent::torrent_status::downloading_metadata &&
					state != libtorrent::torrent_status::downloading)
				return false;
			break;
		case StateFilterMode::Seeding:
			if (state != libtorrent::torrent_status::seeding &&
					state != libtorrent::torrent_status::finished)
				return false;
			break;
		}

		const auto& pattern = filterRegExp ().pattern ();
		if (pattern.isEmpty ())
			return true;

		if (idx.data ().toString ().contains (pattern, Qt::CaseInsensitive))
			return true;

		auto tm = Core::Instance ()->GetProxy ()->GetTagsManager ();
		const auto& reqTags = tm->Split (pattern);
		const auto& torrentTags = idx.data (RoleTags).toStringList ();
		Q_FOREACH (const auto& tagId, torrentTags)
			if (reqTags.contains (tm->GetTag (tagId)))
				return true;

		return false;
	}

	void TabViewProxyModel::setStateFilterMode (int mode)
	{
		StateFilter_ = static_cast<StateFilterMode> (mode);
		invalidateFilter ();
	}
}
}
}
