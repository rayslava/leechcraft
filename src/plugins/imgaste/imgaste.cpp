/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "imgaste.h"
#include <QIcon>
#include <QBuffer>
#include <util/util.h>
#include <interfaces/entitytesthandleresult.h>
#include "hostingservice.h"
#include "poster.h"

namespace LeechCraft
{
namespace Imgaste
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		Util::InstallTranslator ("imgaste");
		Proxy_ = proxy;
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Imgaste";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "Imgaste";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Simple image uploader to imagebin services like dump.bitcheese.net.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	EntityTestHandleResult Plugin::CouldHandle (const Entity& e) const
	{
		if (e.Mime_ != "x-leechcraft/data-filter-request")
			return {};

		if (!e.Entity_.canConvert<QImage> ())
			return {};

		const auto& image = e.Entity_.value<QImage> ();
		return EntityTestHandleResult (image.isNull () ?
				EntityTestHandleResult::PNone :
				EntityTestHandleResult::PIdeal);
	}

	void Plugin::Handle (Entity e)
	{
		const auto& img = e.Entity_.value<QImage> ();

		const auto& format = e.Additional_.value ("Format", "PNG").toString ();

		QByteArray bytes;
		QBuffer buf (&bytes);
		buf.open (QIODevice::ReadWrite);
		if (!img.save (&buf,
					qPrintable (format),
					e.Additional_ ["Quality"].toInt ()))
		{
			qWarning () << Q_FUNC_INFO
					<< "save failed";
			return;
		}

		new Poster (FromString (e.Additional_ ["DataFilter"].toString ()),
				buf.data (),
				format,
				Proxy_);
	}

	QString Plugin::GetFilterVerb () const
	{
		return tr ("Upload image");
	}

	namespace
	{
		IDataFilter::FilterVariant ToFilterVariant (HostingService s)
		{
			const auto& str = ToString (s);
			return { str.toUtf8 (), str, {}, {} };
		}
	}

	QList<IDataFilter::FilterVariant> Plugin::GetFilterVariants () const
	{
		return
		{
			ToFilterVariant (HostingService::DumpBitcheeseNet),
			ToFilterVariant (HostingService::ImagebinCa),
			ToFilterVariant (HostingService::SavepicRu)
		};
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_imgaste, LeechCraft::Imgaste::Plugin);
