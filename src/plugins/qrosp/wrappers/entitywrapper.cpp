/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "entitywrapper.h"

namespace LeechCraft
{
namespace Qrosp
{
	EntityWrapper::EntityWrapper ()
	{
	}

	EntityWrapper::EntityWrapper (const EntityWrapper& ew)
	: E_ (ew.E_)
	{
	}

	EntityWrapper::EntityWrapper (const Entity& entity)
	: E_ (entity)
	{
	}

	void* EntityWrapper::wrappedObject () const
	{
		return &E_;
	}

	Entity EntityWrapper::Native () const
	{
		return E_;
	}

	const QVariant& EntityWrapper::GetEntity () const
	{
		return E_.Entity_;
	}

	void EntityWrapper::SetEntity (const QVariant& entity)
	{
		E_.Entity_ = entity;
	}

	const QString& EntityWrapper::GetLocation () const
	{
		return E_.Location_;
	}

	void EntityWrapper::SetLocation (const QString& location)
	{
		E_.Location_ = location;
	}

	const QString& EntityWrapper::GetMime () const
	{
		return E_.Mime_;
	}

	void EntityWrapper::SetMime (const QString& mime)
	{
		E_.Mime_ = mime;
	}

	const TaskParameters& EntityWrapper::GetParameters () const
	{
		return E_.Parameters_;
	}

	void EntityWrapper::SetParameters (const TaskParameters& tp)
	{
		E_.Parameters_ = tp;
	}

	const QVariantMap& EntityWrapper::GetAdditional () const
	{
		return E_.Additional_;
	}

	void EntityWrapper::SetAdditional (const QVariantMap& additional)
	{
		E_.Additional_ = additional;
	}

	QVariant EntityHandler (void *ptr)
	{
		Entity e = *static_cast<Entity*> (ptr);
		EntityWrapper *w = new EntityWrapper (e);
		return QVariant::fromValue<QObject*> (w);
	}
}
}
