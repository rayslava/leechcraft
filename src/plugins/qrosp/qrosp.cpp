/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "qrosp.h"
#include <QIcon>
#include <QUrl>
#include <QFileInfo>
#include <qross/core/manager.h>
#include <interfaces/entitytesthandleresult.h>
#include "pluginmanager.h"
#include "wrapperobject.h"
#include "scriptloaderinstance.h"

Q_DECLARE_METATYPE (QObject**);

namespace LeechCraft
{
namespace Qrosp
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
	}

	void Plugin::SecondInit ()
	{
	}

	void Plugin::Release ()
	{
		PluginManager::Instance ().Release ();
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Qrosp";
	}

	QString Plugin::GetName () const
	{
		return "Qrosp";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Makes LeechCraft scriptable using Qross.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	QStringList Plugin::Provides () const
	{
		return QStringList ("qrosp");
	}

	QList<QObject*> Plugin::GetPlugins ()
	{
		return PluginManager::Instance ().GetPlugins ();
	}

	EntityTestHandleResult Plugin::CouldHandle (const Entity& entity) const
	{
		QString language = entity.Additional_ ["Language"].toString ().toLower ();
		if (entity.Mime_ != "x-leechcraft/script-wrap-request")
			return EntityTestHandleResult ();
		if (!entity.Additional_ ["Object"].value<QObject**> ())
			return EntityTestHandleResult ();
		if (!Qross::Manager::self ().interpreters ().contains (language))
			return EntityTestHandleResult ();
		if (!entity.Entity_.toUrl ().isValid ())
			return EntityTestHandleResult ();
		if (!QFileInfo (entity.Entity_
				.toUrl ().toLocalFile ()).exists ())
			return EntityTestHandleResult ();

		return EntityTestHandleResult (EntityTestHandleResult::PIdeal);
	}

	void Plugin::Handle (Entity entity)
	{
		QString language = entity.Additional_ ["Language"].toString ().toLower ();
		QString path = entity.Entity_.toUrl ().toLocalFile ();

		*entity.Additional_ ["Object"].value<QObject**> () = new WrapperObject (language, path);
	}

	IScriptLoaderInstance* Plugin::CreateScriptLoaderInstance (const QString& relPath)
	{
		return new ScriptLoaderInstance (relPath);
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_qrosp, LeechCraft::Qrosp::Plugin);
