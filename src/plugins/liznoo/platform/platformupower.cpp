/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "platformupower.h"
#include "dbusconnector.h"
#include "dbusthread.h"

namespace LeechCraft
{
namespace Liznoo
{
	PlatformUPower::PlatformUPower (QObject *parent)
	: PlatformLayer (parent)
	{
		qRegisterMetaType<PlatformLayer::PowerState> ("Liznoo::PlatformLayer::PowerState");

		Thread_ = new DBusThread;
		connect (Thread_,
				SIGNAL(started ()),
				this,
				SLOT (handleThreadStarted ()));
		Thread_->start (QThread::LowestPriority);
	}

	void PlatformUPower::Stop ()
	{
		if (!Thread_->wait (1000))
			Thread_->terminate ();
	}

	void PlatformUPower::ChangeState (PowerState state)
	{
		QMetaObject::invokeMethod (Thread_->GetConnector (),
				"changeState",
				Qt::QueuedConnection,
				Q_ARG (Liznoo::PlatformLayer::PowerState, state));
	}

	void PlatformUPower::handleThreadStarted ()
	{
		emit started ();

		connect (Thread_->GetConnector (),
				SIGNAL (batteryInfoUpdated (Liznoo::BatteryInfo)),
				this,
				SIGNAL (batteryInfoUpdated (Liznoo::BatteryInfo)));
		connect (Thread_->GetConnector (),
				SIGNAL (gotEntity (LeechCraft::Entity)),
				this,
				SIGNAL (gotEntity (LeechCraft::Entity)));
	}
}
}
