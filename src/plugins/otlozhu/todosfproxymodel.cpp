/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "todosfproxymodel.h"
#include <algorithm>
#include <interfaces/core/itagsmanager.h>
#include "core.h"
#include "storagemodel.h"

namespace LeechCraft
{
namespace Otlozhu
{
	TodoSFProxyModel::TodoSFProxyModel (QObject *parent)
	: Util::TagsFilterModel (parent)
	{
	}

	QStringList TodoSFProxyModel::GetTagsForIndex (int row) const
	{
		if (!sourceModel ())
			return QStringList ();

		const auto& ids = sourceModel ()->index (row, 0)
				.data (StorageModel::Roles::ItemTags).toStringList ();
		const auto tm = Core::Instance ().GetProxy ()->GetTagsManager ();
		QStringList result;
		std::transform (ids.begin (), ids.end (), std::back_inserter (result),
				[tm] (const QString& id) { return tm->GetTag (id); });
		return result;
	}

	bool TodoSFProxyModel::lessThan (const QModelIndex& left, const QModelIndex& right) const
	{
		const int leftProg = left.data (StorageModel::Roles::ItemProgress).toInt ();
		const int rightProg = right.data (StorageModel::Roles::ItemProgress).toInt ();
		if (leftProg == 100 && rightProg != 100)
			return true;
		else if (rightProg == 100 && leftProg != 100)
			return false;
		
		return QSortFilterProxyModel::lessThan (left, right);
	}
}
}
