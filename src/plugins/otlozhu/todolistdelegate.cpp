/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "todolistdelegate.h"
#include <QAbstractItemView>
#include <QStyle>
#include <QDateTimeEdit>
#include <util/tags/tagslineedit.h>
#include <util/tags/tagscompleter.h>
#include "storagemodel.h"

namespace LeechCraft
{
namespace Otlozhu
{
	TodoListDelegate::TodoListDelegate (QAbstractItemView *parent)
	: QStyledItemDelegate (parent)
	, View_ (parent)
	{
	}

	QWidget* TodoListDelegate::createEditor (QWidget *parent,
			const QStyleOptionViewItem& option, const QModelIndex& index) const
	{
		switch (index.column ())
		{
		case StorageModel::Columns::Tags:
		{
			auto edit = new Util::TagsLineEdit (parent);
			new Util::TagsCompleter (edit, edit);
			edit->AddSelector ();
			edit->setText (index.data (Qt::EditRole).toString ());
			edit->setFrame (false);
			return edit;
		}
		case StorageModel::Columns::DueDate:
		case StorageModel::Columns::Created:
		{
			auto edit = new QDateTimeEdit (parent);
			edit->setFrame (false);
			edit->setCalendarPopup (true);
			edit->setDateTime (index.data (Qt::EditRole).toDateTime ());
			return edit;
		}
		default:
			return QStyledItemDelegate::createEditor (parent, option, index);
		}
	}

	void TodoListDelegate::updateEditorGeometry (QWidget* editor,
			const QStyleOptionViewItem& option, const QModelIndex& index) const
	{
		switch (index.column ())
		{
		case StorageModel::Columns::Tags:
			editor->setGeometry (option.rect);
			break;
		default:
			QStyledItemDelegate::updateEditorGeometry (editor, option, index);
			break;
		}
	}

	void TodoListDelegate::paint (QPainter *painter,
			const QStyleOptionViewItem& thatOption, const QModelIndex& index) const
	{
		QStyleOptionViewItem option (thatOption);

		if (index.data (StorageModel::Roles::ItemProgress).toInt () == 100)
			option.font.setStrikeOut (true);

		switch (index.column ())
		{
		case StorageModel::Columns::Percentage:
		{
			QStyleOptionProgressBarV2 pbo;
			pbo.rect = option.rect;
			pbo.minimum = 0;
			pbo.maximum = 100;
			pbo.progress = index.data ().toInt ();
			pbo.state = option.state;
			pbo.text = index.data ().toString () + '%';
			pbo.textVisible = true;
			View_->style ()->drawControl (QStyle::CE_ProgressBar, &pbo, painter);
			break;
		}
		default:
			QStyledItemDelegate::paint (painter, option, index);
			break;
		}
	}
}
}
