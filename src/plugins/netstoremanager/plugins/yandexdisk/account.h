/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_NETSTOREMANAGER_PLUGINS_YANDEXDISK_ACCOUNT_H
#define PLUGINS_NETSTOREMANAGER_PLUGINS_YANDEXDISK_ACCOUNT_H
#include <memory>
#include <QObject>
#include <QUrl>
#include <interfaces/netstoremanager/istorageaccount.h>
#include <interfaces/netstoremanager/isupportfilelistings.h>
#include "flitem.h"

class QNetworkRequest;

namespace LeechCraft
{
namespace NetStoreManager
{
namespace YandexDisk
{
	class Plugin;
	class AuthManager;

	class Account;
	typedef std::shared_ptr<Account> Account_ptr;

	class Account : public QObject
				  , public IStorageAccount
				  , public ISupportFileListings
	{
		Q_OBJECT
		Q_INTERFACES (LeechCraft::NetStoreManager::IStorageAccount
				LeechCraft::NetStoreManager::ISupportFileListings)

		Plugin *Plugin_;
		QString Name_;

		QString Login_;

		AuthManager *AM_;

		QHash<QStringList, QUrl> ID2URL_;
	public:
		Account (Plugin*);

		QByteArray Serialize () const;
		static Account_ptr Deserialize (const QByteArray&, Plugin*);

		AuthManager* GetAuthManager () const;
		QString GetLogin () const;
		QString GetPassword ();

		bool ExecConfigDialog ();

		void SetAccountName (const QString&);
		QString GetAccountName () const;
		QObject* GetParentPlugin () const;
		QObject* GetQObject ();
		AccountFeatures GetAccountFeatures () const;
		void Upload (const QString&);

		ListingOps GetListingOps () const;

		void RefreshListing ();
		QStringList GetListingHeaders () const;

		void Delete (const QList<QStringList>&);
		void Prolongate (const QList<QStringList>&);
		void MoveToTrash (const QList< QStringList >& id);
		void RestoreFromTrash (const QList< QStringList >& id);
		void EmptyTrash (const QList< QStringList >& id);
		void RequestUrl (const QList< QStringList >& id);

		QNetworkRequest MakeRequest (const QUrl& = QUrl ()) const;
	private:
		void SimpleAction (const QString&, const QList<QStringList>&);
	private slots:
		void forceRefresh ();
		void handleFileList (const QList<FLItem>&);
	signals:
		void upStatusChanged (const QString&, const QString&);
		void upProgress (quint64, quint64, const QString&);
		void upError (const QString&, const QString&);
		void gotURL (const QUrl&, const QString&);
		void gotFileUrl (const QUrl& url, const QStringList& id);

		void gotListing (const QList<QList<QStandardItem*>>&);
	};
}
}
}

#endif
