/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "fswinwatcher.h"
#include <QX11Info>
#include <QMainWindow>
#include <X11/Xlib.h>
#include <interfaces/core/irootwindowsmanager.h>

namespace LeechCraft
{
namespace Kinotify
{
	FSWinWatcher::FSWinWatcher (ICoreProxy_ptr proxy, QObject *parent)
	: QObject (parent)
	, Proxy_ (proxy)
	{
	}

	namespace
	{
		bool getSize (Display *dpy, Window win, int *width,int *height)
		{
			XWindowAttributes windowattr;
			if (XGetWindowAttributes (dpy, win, &windowattr) == 0)
				return false;

			*width = windowattr.width;
			*height = windowattr.height;
			return true;
		}
	}

	bool FSWinWatcher::IsCurrentFS ()
	{
		Display *display = QX11Info::display ();
		Window focusWin;
		int reverToReturn;
		int screen = QX11Info::appScreen ();
		int screenWidth, screenHeight, width, height;
		if (!display)
			return false;

		XGetInputFocus (display, &focusWin, &reverToReturn);

		auto rootWM = Proxy_->GetRootWindowsManager ();
		for (int i = 0; i < rootWM->GetWindowsCount (); ++i)
			if (rootWM->GetMainWindow (i)->effectiveWinId () == focusWin)
				return false;

		if (!(getSize (display, RootWindow (display, screen), &screenWidth, &screenHeight) &&
				getSize (display, focusWin, &width, &height)))
			return false;

		return screenWidth == width && screenHeight == height;
	}
}
}
