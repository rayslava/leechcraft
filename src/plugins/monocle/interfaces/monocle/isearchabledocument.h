/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QRectF>
#include <QMap>
#include <QtPlugin>

namespace LeechCraft
{
namespace Monocle
{
	/** @brief Interface for documents supporting searching for text.
	 * 
	 * If document represents a format that supports searching for text,
	 * the document should implement this interface.
	 * 
	 * @sa IDocument
	 */
	class ISearchableDocument
	{
	public:
		/** @brief Virtual destructor.
		 */
		virtual ~ISearchableDocument () {}

		/** @brief Returns the search results for the \em text.
		 * 
		 * This function should return the map where keys are indexes of
		 * pages containing the given \em text and with each value
		 * corresponding to a key being a list of rectangles containing
		 * the \em text on the page.
		 * 
		 * Rectangles should be in page coordinates, that is, with width
		 * from 0 to page's width and height from 0 to page's height.
		 * 
		 * If a page doesn't contain any occurrences of \em text it
		 * should better be omitted from the map for performance reasons.
		 * 
		 * @param[in] text The text to search for.
		 * @param[in] cs The case sensitivity of the search.
		 * @return The map from page indexes to list of rectangles
		 * containing \em text for those indexes.
		 */
		virtual QMap<int, QList<QRectF>> GetTextPositions (const QString& text, Qt::CaseSensitivity cs) = 0;
	};
}
}

Q_DECLARE_INTERFACE (LeechCraft::Monocle::ISearchableDocument,
		"org.LeechCraft.Monocle.ISearchableDocument/1.0");
