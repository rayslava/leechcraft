/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QtPlugin>

namespace LeechCraft
{
namespace Monocle
{
	/** @brief Implemented by documents whose pages can change dynamically.
	 *
	 * This interface should be implemented by documents whose pages can
	 * change "themselves", including only page sizes and page contents.
	 * Changes in forms, annotations and links (if any) should be
	 * propagated via the corresponding classes.
	 *
	 * The primary use of this interface is for format backends that load
	 * the documents asynchronously. An example of such backend is the
	 * DjVuLibre-based Seen plugin.
	 *
	 * This class has some signals, and one can use the
	 * IDocument::GetQObject() method to get an object of this class as a
	 * QObject and connect to those signals:
	 * \code
	 * IDynamicDocument *idd;
	 * connect (dynamic_cast<IDocument*> (idd)->GetQObject (),
	 *         SIGNAL (pageSizeChanged (int)),
	 *         this,
	 *         SLOT (handlePageSizeChanged (int)));
	 * \endcode
	 */
	class IDynamicDocument
	{
	public:
		/** @brief Virtual destructor.
		 */
		virtual ~IDynamicDocument () {}
	protected:
		/** @brief Emitted when the size of the given page is changed.
		 *
		 * The signal is emitted after the new size is known, so
		 * <code>IDocument::GetPageSize(page)</code> should already
		 * return the new value.
		 *
		 * @param[out] page The index of the page that has been changed.
		 */
		virtual void pageSizeChanged (int page) = 0;

		/** @brief Emitted when contents of the given page are changed.
		 *
		 * The \em page should typically be re-rendered after this signal.
		 *
		 * @param[out] page The index of the page that has been changed.
		 */
		virtual void pageContentsChanged (int page) = 0;
	};
}
}

Q_DECLARE_INTERFACE (LeechCraft::Monocle::IDynamicDocument,
		"org.LeechCraft.Monocle.IDynamicDocument/1.0");
