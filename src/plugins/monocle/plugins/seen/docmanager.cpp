/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "docmanager.h"
#include "document.h"

namespace LeechCraft
{
namespace Monocle
{
namespace Seen
{
	DocManager::DocManager (ddjvu_context_t *ctx, QObject *parent)
	: QObject (parent)
	, Context_ (ctx)
	{
	}

	std::shared_ptr<Document> DocManager::LoadDocument (const QString& file)
	{
		std::shared_ptr<Document> doc (new Document (file, Context_, parent (), this));
		Documents_ [doc->GetNativeDoc ()] = doc;
		return doc;
	}

	void DocManager::Unregister (ddjvu_document_t *doc)
	{
		Documents_.remove (doc);
	}

	void DocManager::HandleDocInfo (ddjvu_document_t *nativeDoc)
	{
		auto weak = Documents_ [nativeDoc];
		auto doc = weak.lock ();
		if (doc)
			doc->UpdateDocInfo ();
	}

	void DocManager::HandlePageInfo (ddjvu_document_t *nativeDoc, ddjvu_page_t *page)
	{
		auto weak = Documents_ [nativeDoc];
		auto doc = weak.lock ();
		if (doc)
			doc->UpdatePageInfo (page);
	}

	void DocManager::RedrawPage (ddjvu_document_t *nativeDoc, ddjvu_page_t *page)
	{
		auto weak = Documents_ [nativeDoc];
		auto doc = weak.lock ();
		if (doc)
			doc->RedrawPage (page);
	}
}
}
}
