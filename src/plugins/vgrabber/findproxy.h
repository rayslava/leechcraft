/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <boost/optional.hpp>
#include <QAbstractItemModel>
#include <QList>
#include <QUrl>
#include <interfaces/structures.h>
#include <interfaces/ifinder.h>

class QToolBar;
class QAction;

namespace LeechCraft
{
struct Entity;

namespace vGrabber
{
	class CategoriesSelector;

	class FindProxy : public QAbstractItemModel
					, public IFindProxy
	{
		Q_OBJECT
		Q_INTERFACES (IFindProxy);

		QList<QObject*> Downloaders_;
	protected:
		QAction *ActionDownload_;
		QAction *ActionHandle_;
		QAction *ActionCopyToClipboard_;
		QToolBar *Toolbar_;
		Request R_;
		QMap<int, QString> Jobs_;
		boost::optional<QString> Error_;
		QMenu *ContextMenu_;
	public:
		enum FindProxyType
		{
			FPTAudio,
			FPTVideo
		};
	protected:
		FindProxyType FindProxyType_;
		CategoriesSelector *CategoriesSelector_;
	public:
		FindProxy (const Request&, CategoriesSelector*, FindProxyType);
		virtual ~FindProxy ();

		void Start ();
		QAbstractItemModel* GetModel ();
		QByteArray GetUniqueSearchID () const;
		QStringList GetCategories () const;

		virtual int columnCount (const QModelIndex& = QModelIndex ()) const;
		virtual Qt::ItemFlags flags (const QModelIndex&) const;
		virtual QVariant headerData (int, Qt::Orientation, int = Qt::DisplayRole) const;
		virtual QModelIndex index (int, int, const QModelIndex& = QModelIndex()) const;
		virtual QModelIndex parent (const QModelIndex&) const;
	protected:
		void SetError (const QString&);
		virtual QUrl GetURL () const = 0;
		virtual void Handle (const QString&) = 0;
		void EmitWith (TaskParameter, const QUrl&);
		void HandleProvider (QObject*);
	protected slots:
		virtual void handleDownload () = 0;
		virtual void handleHandle () = 0;
		virtual void handleCopyToClipboard ();
	private slots:
		void handleJobFinished (int);
		void handleJobError (int);
	signals:
		void gotEntity (const LeechCraft::Entity&);
		void delegateEntity (const LeechCraft::Entity&,
				int*, QObject**);
		void error (const QString&);
	};

	typedef std::shared_ptr<FindProxy> FindProxy_ptr;
}
}
