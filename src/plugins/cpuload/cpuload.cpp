/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "cpuload.h"
#include <QIcon>
#include <QAbstractItemModel>
#include "linuxbackend.h"
#include "backendproxy.h"

namespace LeechCraft
{
namespace CpuLoad
{
	void Plugin::Init (ICoreProxy_ptr)
	{
		auto backend = new LinuxBackend;

		CpuQuark_.reset (new QuarkComponent { "cpuload", "CpuLoadQuark.qml" });

		auto backendProxy = new BackendProxy { backend };
		CpuQuark_->DynamicProps_.append ({ "CpuLoad_proxy", backendProxy });
		CpuQuark_->DynamicProps_.append ({ "CpuLoad_model", backendProxy->GetModel () });
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.CpuLoad";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "CPU Load";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Quark for monitoring CPU load.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	QuarkComponents_t Plugin::GetComponents () const
	{
		return { CpuQuark_ };
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_cpuload, LeechCraft::CpuLoad::Plugin);
