/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "graphsfactory.h"
#include <QStringList>
#include <QMap>
#include <QApplication>
#include <qwt_plot_curve.h>
#include <qwt_plot_histogram.h>
#include <qwt_plot.h>
#include <qwt_plot_grid.h>
#include "core.h"
#include "operationsmanager.h"
#include "prelude.h"
#include "accountsmanager.h"
#include "currenciesmanager.h"

namespace LeechCraft
{
namespace Poleemery
{
	namespace
	{
		QList<EntryBase_ptr> GetLastEntries (int days)
		{
			auto opsMgr = Core::Instance ().GetOpsManager ();
			auto entries = opsMgr->GetAllEntries ();

			std::sort (entries.begin (), entries.end (),
					[] (EntryBase_ptr l, EntryBase_ptr r)
					{
						return l->Date_ == r->Date_ ?
								l->Amount_ < r->Amount_ :
								l->Date_ < r->Date_;
					});

			for (auto i = entries.begin (); i < entries.end () - 1; )
			{
				const auto& item = *i;
				const auto& next = *(i + 1);
				if (item->Date_ == next->Date_ &&
						item->Amount_ == next->Amount_ &&
						item->GetType () != next->GetType ())
					i = entries.erase (i, i + 2);
				else
					++i;
			}

			if (days > 0)
			{
				const auto& now = QDateTime::currentDateTime ();
				const auto& startDt = now.addDays (-days);
				auto pos = std::upper_bound (entries.begin (), entries.end (), startDt,
						[] (const QDateTime& dt, const EntryBase_ptr& entry)
							{ return dt < entry->Date_; });
				entries.erase (entries.begin (), pos);
			}
			return entries;
		}

		QMap<double, BalanceInfo> GetDays2Infos (int days)
		{
			auto opsMgr = Core::Instance ().GetOpsManager ();
			const auto& entries = opsMgr->GetEntriesWBalance ();
			if (entries.isEmpty ())
				return {};

			auto pos = entries.begin ();
			const auto& now = QDateTime::currentDateTime ();
			if (days > 0)
			{
				const auto& startDt = now.addDays (-days);
				pos = std::upper_bound (entries.begin (), entries.end (), startDt,
						[] (const QDateTime& dt, const EntryWithBalance& entry)
							{ return dt < entry.Entry_->Date_; });
			}
			else
				days = pos->Entry_->Date_.daysTo (now);

			QMap<double, BalanceInfo> days2infos;
			for (; pos != entries.end (); ++pos)
			{
				const auto& then = pos->Entry_->Date_;

				const auto daysBack = then.daysTo (now);
				days2infos [(days - daysBack) + then.time ().hour () / 24.] = pos->Balance_;
			}

			if (days2infos.isEmpty ())
				return days2infos;

			auto minNum = days2infos.begin ().key ();
			auto prevBalance = days2infos.begin ().value ();
			for (int d = 0; d < days; ++d)
				for (int h = 0; h < 48; ++h)
				{
					const auto val = d + h / 48.;
					if (val <= minNum)
						continue;

					if (days2infos.contains (val))
					{
						prevBalance = days2infos.value (val);
						continue;
					}

					days2infos [val] = prevBalance;
				}

			return days2infos;
		}

		QMap<int, double> GetLastBalances (const QMap<double, BalanceInfo>& days2infos)
		{
			auto accsMgr = Core::Instance ().GetAccsManager ();
			const auto& accs = accsMgr->GetAccounts ();

			QMap<int, double> lastBalances;
			for (const auto& balance : days2infos)
			{
				for (const auto& id : balance.Accs_.keys ())
					if (!lastBalances.contains (id))
						lastBalances [id] = balance.Accs_ [id];

				if (accs.size () == lastBalances.size ())
					break;
			}

			return lastBalances;
		}

		void AddUp (QMap<int, QVector<double>>& accBalances)
		{
			if (accBalances.isEmpty ())
				return;

			QVector<double> curSum (accBalances.begin ()->size (), 0);
			for (auto& vec : accBalances)
				curSum = vec = ZipWith (vec, curSum, std::plus<double> ());
		}

		QList<QColor> GenerateColors (int numColors)
		{
			QList<QColor> result;
			for (int i = 0; i < numColors; ++i)
			{
				QColor color;
				color.setHsvF (i / static_cast<double> (numColors), 0.8, 0.8);
				result << color;
			}
			return result;
		}

		QList<QwtPlotItem*> CreateBalanceItems (int days, bool cumulative)
		{
			const auto& days2infos = GetDays2Infos (days);
			const auto& xData = days2infos.keys ().toVector ();
			auto lastBalances = GetLastBalances (days2infos);

			const auto& periodAccounts = lastBalances.keys ();

			QMap<int, QVector<double>> accBalances;
			for (const auto& balance : days2infos)
				for (auto acc : periodAccounts)
				{
					auto value = balance.Accs_.value (acc, lastBalances [acc]);
					accBalances [acc] << value;
					lastBalances [acc] = value;
				}

			auto accsMgr = Core::Instance ().GetAccsManager ();
			auto curMgr = Core::Instance ().GetCurrenciesManager ();
			for (auto accId : accBalances.keys ())
			{
				const auto& acc = accsMgr->GetAccount (accId);
				const auto& rate = curMgr->GetUserCurrencyRate (acc.Currency_);
				if (rate != 1)
				{
					auto& vec = accBalances [accId];
					vec = Map (vec, [rate] (double x) { return x * rate; });
				}
			}

			if (cumulative)
				AddUp (accBalances);

			const auto& colors = GenerateColors (periodAccounts.size ());
			int currentColor = 0;

			QList<QwtPlotItem*> result;
			int z = periodAccounts.size ();
			for (auto accId : periodAccounts)
			{
				const auto& acc = accsMgr->GetAccount (accId);

				auto curColor = colors.at (currentColor++ % colors.size ());

				auto item = new QwtPlotCurve (acc.Name_);
				item->setPen (curColor);

				if (!cumulative)
					curColor.setAlphaF (0.2);
				item->setBrush (curColor);

				item->setZ (z--);
				item->setSamples (xData, accBalances [accId]);

				result << item;
			}

			auto grid = new QwtPlotGrid;
			grid->enableYMin (true);
			grid->enableXMin (true);
			grid->setMinPen (QPen (Qt::gray, 1, Qt::DashLine));
			result << grid;

			return result;
		}

		QList<QwtPlotItem*> CreateSpendingBreakdownItems (int days, bool absolute)
		{
			double income = 0;
			double savings = 0;
			QMap<QString, double> cat2amount;

			auto accsMgr = Core::Instance ().GetAccsManager ();
			auto curMgr = Core::Instance ().GetCurrenciesManager ();
			for (auto entry : GetLastEntries (days))
			{
				auto acc = accsMgr->GetAccount (entry->AccountID_);
				const auto amount = curMgr->ToUserCurrency (acc.Currency_, entry->Amount_);

				switch (entry->GetType ())
				{
				case EntryType::Expense:
				{
					auto expense = std::dynamic_pointer_cast<ExpenseEntry> (entry);
					if (expense->Categories_.isEmpty ())
						cat2amount [QObject::tr ("uncategorized")] += amount;
					else
						for (const auto& cat : expense->Categories_)
							cat2amount [cat] += amount;

					savings -= amount;
					break;
				}
				case EntryType::Receipt:
					income += amount;
					savings += amount;
					break;
				}
			}

			if (income > 0)
			{
				if (absolute)
					cat2amount [QObject::tr ("income")] = income;
				if (savings > 0)
					cat2amount [QObject::tr ("savings")] = savings;
			}

			if (cat2amount.isEmpty ())
				return {};

			if (!absolute)
			{
				const auto sum = std::accumulate (cat2amount.begin (), cat2amount.end (), 0.0);
				for (auto& val : cat2amount)
					val = val * 100 / sum;
			}

			const auto& colors = GenerateColors (cat2amount.size ());
			int currentIndex = 0;

			QList<QwtPlotItem*> result;
			for (const auto& cat : cat2amount.keys ())
			{
				auto item = new QwtPlotHistogram (cat);

				auto curColor = colors.at (currentIndex++ % colors.size ());

				item->setPen (curColor);
				item->setBrush (curColor);
				item->setSamples ({ { cat2amount [cat],
							static_cast<double> (currentIndex * 5),
							static_cast<double> (currentIndex * 5 + 1) } });

				result << item;
			}

			auto grid = new QwtPlotGrid;
			grid->enableYMin (true);
			grid->enableX (false);
			grid->setMinPen (QPen (Qt::gray, 1, Qt::DashLine));
			result << grid;

			return result;
		}
	}

	GraphsFactory::GraphsFactory ()
	{
		auto prepareCummulative = [] (QwtPlot *plot) -> void
				{
					auto curMgr = Core::Instance ().GetCurrenciesManager ();
					plot->enableAxis (QwtPlot::Axis::xBottom, true);
					plot->enableAxis (QwtPlot::Axis::yLeft, true);
					plot->setAxisTitle (QwtPlot::Axis::xBottom, QObject::tr ("Days"));
					plot->setAxisTitle (QwtPlot::Axis::yLeft, curMgr->GetUserCurrency ());
				};

		Infos_.append ({
				QObject::tr ("Cumulative accounts balance (month)"),
				[this] { return CreateBalanceItems (30, true); },
				prepareCummulative
			});
		Infos_.append ({
				QObject::tr ("Comparative accounts balance (month)"),
				[this] { return CreateBalanceItems (30, false); },
				prepareCummulative
			});
		Infos_.append ({
				QObject::tr ("Cumulative accounts balance (all-time)"),
				[this] { return CreateBalanceItems (-1, true); },
				prepareCummulative
			});
		Infos_.append ({
				QObject::tr ("Comparative accounts balance (all-time)"),
				[this] { return CreateBalanceItems (-1, false); },
				prepareCummulative
			});

		auto prepareRelBreakdown = [] (QwtPlot *plot)
		{
			plot->enableAxis (QwtPlot::Axis::xBottom, false);
			plot->enableAxis (QwtPlot::Axis::yLeft, true);
			plot->setAxisTitle (QwtPlot::Axis::yLeft, "%");
		};
		auto prepareAbsBreakdown = [] (QwtPlot *plot)
		{
			plot->enableAxis (QwtPlot::Axis::xBottom, false);
			plot->enableAxis (QwtPlot::Axis::yLeft, true);

			auto curMgr = Core::Instance ().GetCurrenciesManager ();
			plot->setAxisTitle (QwtPlot::Axis::yLeft, curMgr->GetUserCurrency ());
		};
		Infos_.append ({
				QObject::tr ("Per-category spendings breakdown (absolute, month)"),
				[this] { return CreateSpendingBreakdownItems (30, true); },
				prepareAbsBreakdown
			});
		Infos_.append ({
				QObject::tr ("Per-category spendings breakdown (relative, month)"),
				[this] { return CreateSpendingBreakdownItems (30, false); },
				prepareRelBreakdown
			});
		Infos_.append ({
				QObject::tr ("Per-category spendings breakdown (absolute, all-time)"),
				[this] { return CreateSpendingBreakdownItems (-1, true); },
				prepareAbsBreakdown
			});
		Infos_.append ({
				QObject::tr ("Per-category spendings breakdown (relative, all-time)"),
				[this] { return CreateSpendingBreakdownItems (-1, false); },
				prepareRelBreakdown
			});
	}

	QStringList GraphsFactory::GetNames () const
	{
		QStringList result;
		for (const auto& info : Infos_)
			result << info.Name_;
		return result;
	}

	QList<QwtPlotItem*> GraphsFactory::CreateItems (int index)
	{
		if (index < 0 || index >= Infos_.size ())
			return {};

		return Infos_.at (index).Creator_ ();
	}

	void GraphsFactory::PreparePlot (int index, QwtPlot *plot)
	{
		if (index < 0 || index >= Infos_.size ())
			return;

		Infos_.at (index).Preparer_ (plot);
	}
}
}
