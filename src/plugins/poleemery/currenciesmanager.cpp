/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "currenciesmanager.h"
#include <cmath>
#include <limits>
#include <QLocale>
#include <QSet>
#include <QUrl>
#include <QStandardItemModel>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QtDebug>
#include <QDomDocument>
#include "xmlsettingsmanager.h"
#include "core.h"

namespace LeechCraft
{
namespace Poleemery
{
	CurrenciesManager::CurrenciesManager (QObject *parent)
	: QObject (parent)
	, Model_ (new QStandardItemModel (this))
	, UserCurrency_ (QLocale::system ().currencySymbol (QLocale::CurrencyIsoCode))
	{
		Model_->setHorizontalHeaderLabels ({ tr ("Code"), tr ("Name") });
		connect (Model_,
				SIGNAL (itemChanged (QStandardItem*)),
				this,
				SLOT (handleItemChanged (QStandardItem*)));
		Enabled_ = XmlSettingsManager::Instance ().property ("EnabledLocales").toStringList ();
		if (Enabled_.isEmpty ())
			Enabled_ << "USD" << UserCurrency_;
		Enabled_.sort ();

		struct CurInfo
		{
			QString Code_;
			QString Name_;
		};
		QSet<QString> knownCodes;
		QList<CurInfo> currencies;
		for (auto language = 2; language < 214; ++language)
			for (auto country = 0; country < 247; ++country)
			{
				const QLocale loc (static_cast<QLocale::Language> (language),
						static_cast<QLocale::Country> (country));

				const auto& code = loc.currencySymbol (QLocale::CurrencyIsoCode);
				if (code.isEmpty ())
					continue;

				if (knownCodes.contains (code))
					continue;

				knownCodes << code;
				currencies.push_back ({ code, loc.currencySymbol (QLocale::CurrencyDisplayName) });
			}

		std::sort (currencies.begin (), currencies.end (),
				[] (const CurInfo& l, const CurInfo& r) { return l.Code_ < r.Code_; });

		for (const auto& cur : currencies)
		{
			Currencies_ << cur.Code_;

			QList<QStandardItem*> row { new QStandardItem (cur.Code_), new QStandardItem (cur.Name_) };
			for (auto item : row)
				item->setEditable (false);

			if (cur.Code_ != "USD")
			{
				row.first ()->setCheckable (true);
				row.first ()->setCheckState (Enabled_.contains (cur.Code_) ? Qt::Checked : Qt::Unchecked);
			}

			Model_->appendRow (row);
		}
	}

	void CurrenciesManager::Load ()
	{
		FetchRates (Enabled_);
	}

	const QStringList& CurrenciesManager::GetEnabledCurrencies () const
	{
		return Enabled_;
	}

	QAbstractItemModel* CurrenciesManager::GetSettingsModel () const
	{
		return Model_;
	}

	QString CurrenciesManager::GetUserCurrency () const
	{
		return UserCurrency_;
	}

	double CurrenciesManager::ToUserCurrency (const QString& code, double value) const
	{
		return value * GetUserCurrencyRate (code);
	}

	double CurrenciesManager::GetUserCurrencyRate (const QString& code) const
	{
		if (code == UserCurrency_)
			return 1;

		return RatesFromUSD_.value (UserCurrency_, 1) / RatesFromUSD_.value (code, 1);
	}

	double CurrenciesManager::Convert (const QString& from, const QString& to, double value) const
	{
		if (from == to)
			return value;

		return value * RatesFromUSD_.value (to, 1) / RatesFromUSD_.value (from, 1);
	}

	void CurrenciesManager::FetchRates (QStringList values)
	{
		values.removeAll ("USD");
		QStringList subqueries;
		for (const auto& value : values)
			subqueries << "pair in (\"USD" + value + "\")";

		QString urlStr = QString ("http://query.yahooapis.com/v1/public/yql?q="
				"select * from yahoo.finance.xchange where %1&env=http://datatables.org/alltables.env").arg (subqueries.join (" or "));
		QUrl url (urlStr);

		auto nam = Core::Instance ().GetCoreProxy ()->GetNetworkAccessManager ();
		auto reply = nam->get (QNetworkRequest (url));
		connect (reply,
				SIGNAL (finished ()),
				this,
				SLOT (gotRateReply ()));
	}

	void CurrenciesManager::gotRateReply ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		reply->deleteLater ();

		const auto& data = reply->readAll ();

		QDomDocument doc;
		if (!doc.setContent (data))
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to parse"
					<< data;
			return;
		}

		bool changed = false;
		auto rateElem = doc.documentElement ()
				.firstChildElement ("results")
				.firstChildElement ("rate");
		while (!rateElem.isNull ())
		{
			auto toValue = rateElem.attribute ("id").mid (3);
			if (toValue.size () != 3)
			{
				qWarning () << "incorrect `to` value"
						<< toValue;
				continue;
			}

			const auto newRate = rateElem.firstChildElement ("Rate").text ().toDouble ();
			if (std::fabs (newRate - RatesFromUSD_ [toValue]) > std::numeric_limits<double>::epsilon ())
			{
				RatesFromUSD_ [toValue] = newRate;
				changed = true;
			}

			rateElem = rateElem.nextSiblingElement ("rate");
		}

		if (changed)
			emit currenciesUpdated ();
	}

	void CurrenciesManager::handleItemChanged (QStandardItem *item)
	{
		if (item->column ())
			return;

		QStringList news;

		const auto& code = item->text ();
		if (item->checkState () == Qt::Unchecked)
			Enabled_.removeAll (code);
		else if (!Enabled_.contains (code))
		{
			news << code;
			Enabled_ << code;
			Enabled_.sort ();
		}
		FetchRates (news);

		XmlSettingsManager::Instance ().setProperty ("EnabledLocales", Enabled_);
	}
}
}
