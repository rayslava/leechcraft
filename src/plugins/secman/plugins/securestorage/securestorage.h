/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2011-2012  Alexander Konovalov
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_SECMAN_PLUGINS_SECURESTORAGE_SECURESTORAGE_H
#define PLUGINS_SECMAN_PLUGINS_SECURESTORAGE_SECURESTORAGE_H
#include <boost/shared_ptr.hpp>
#include <QObject>
#include <QInputDialog>
#include <interfaces/iinfo.h>
#include <interfaces/iplugin2.h>
#include <interfaces/secman/istorageplugin.h>
#include <interfaces/iactionsexporter.h>
#include <interfaces/ihavesettings.h>
#include "cryptosystem.h"
#include "settingswidget.h"
#include "newpassworddialog.h"

class QSettings;

namespace LeechCraft
{
namespace Plugins
{
namespace SecMan
{
namespace StoragePlugins
{
namespace SecureStorage
{
	class Plugin : public QObject
				 , public IInfo
				 , public IPlugin2
				 , public IActionsExporter
				 , public IStoragePlugin
				 , public IHaveSettings
	{
		Q_OBJECT
		Q_INTERFACES (IInfo IPlugin2 LeechCraft::Plugins::SecMan::IStoragePlugin IActionsExporter IHaveSettings)

		Util::XmlSettingsDialog_ptr XmlSettingsDialog_;
		SettingsWidget* SettingsWidget_;
		
		boost::shared_ptr<QSettings> Storage_;
		boost::shared_ptr<QSettings> Settings_;

		QString WindowTitle_;
		CryptoSystem *CryptoSystem_;

		QAction *ForgetKeyAction_;
		QAction *InputKeyAction_;

		boost::shared_ptr<QInputDialog> InputPasswordDialog_;
		boost::shared_ptr<NewPasswordDialog> NewPasswordDialog_;
	public:
		Plugin ();
		void Init (ICoreProxy_ptr);
		void SecondInit ();
		QByteArray GetUniqueID () const;
		void Release ();
		QString GetName () const;
		QString GetInfo () const;
		QIcon GetIcon () const;

		QSet<QByteArray> GetPluginClasses () const;

		StorageTypes GetStorageTypes () const;
		QList<QByteArray> ListKeys (StorageType);
		void Save (const QByteArray&, const QVariantList&, StorageType, bool);
		QVariantList Load (const QByteArray&, StorageType);
		void Save (const QList<QPair<QByteArray, QVariantList>>&, StorageType, bool);
		QList<QVariantList> Load (const QList<QByteArray>&, StorageType);
		QList<QAction*> GetActions (LeechCraft::ActionsEmbedPlace) const;
		
		LeechCraft::Util::XmlSettingsDialog_ptr GetSettingsDialog () const;
	public slots:
		void forgetKey ();
		void inputKey ();
		void changePassword ();
		void clearSettings ();
	private:
		const CryptoSystem& GetCryptoSystem ();
		void SetCryptoSystem (CryptoSystem *cs);
		void UpdateActionsStates ();
		void UpdatePasswordSettings (const QString& pass);

		void ChangePassword (const QString& oldPass, const QString& newPass);
		void CreateNewPassword ();
		bool IsPasswordCorrect (const CryptoSystem& cs);
		bool IsPasswordEmpty ();
		bool IsPasswordSet ();
	signals:
		void gotActions (QList<QAction*>, ActionsEmbedPlace);
	};
	
	class PasswordNotEnteredException : std::exception
	{
	public:
		PasswordNotEnteredException () { }

		const char* what () const throw ()
		{
			return "PasswordNotEnteredException";
		}
	};

	/// return s1 if s1==s2, else throw PasswordNotEnteredException.
	QString ReturnIfEqual (const QString& s1, const QString& s2);
}
}
}
}
}

#endif
