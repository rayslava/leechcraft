/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "imimportpage.h"
#include <QStandardItemModel>

namespace LeechCraft
{
namespace NewLife
{
namespace Common
{
	QObject *IMImportPage::S_Plugin_ = 0;

	void IMImportPage::SetPluginInstance (QObject *obj)
	{
		S_Plugin_ = obj;
	}

	IMImportPage::IMImportPage (QWidget *parent)
	: QWizardPage (parent)
	, AccountsModel_ (new QStandardItemModel (this))
	{
		Ui_.setupUi (this);
		Ui_.AccountsTree_->setModel (AccountsModel_);
	}

	bool IMImportPage::isComplete () const
	{
		return true;
	}

	int IMImportPage::nextId () const
	{
		return -1;
	}

	void IMImportPage::initializePage ()
	{
		connect (wizard (),
				SIGNAL (accepted ()),
				this,
				SLOT (handleAccepted ()),
				Qt::UniqueConnection);
		connect (this,
				SIGNAL (gotEntity (LeechCraft::Entity)),
				wizard (),
				SIGNAL (gotEntity (LeechCraft::Entity)));

		AccountsModel_->clear ();

		QStringList labels;
		labels << tr ("Account name")
				<< tr ("JID")
				<< tr ("Import account settings")
				<< tr ("Import history");
		AccountsModel_->setHorizontalHeaderLabels (labels);

		FindAccounts ();
	}

	void IMImportPage::handleAccepted ()
	{
		for (int i = 0; i < AccountsModel_->rowCount (); ++i)
		{
			QStandardItem *profItem = AccountsModel_->item (i);
			for (int j = 0; j < profItem->rowCount (); ++j)
			{
				QStandardItem *accItem = profItem->child (j);
				if (profItem->child (j, Column::ImportAcc)->checkState () == Qt::Checked)
					SendImportAcc (accItem);
				if (profItem->child (j, Column::ImportHist)->checkState () == Qt::Checked)
					SendImportHist (accItem);
			}
		}
	}
}
}
}
