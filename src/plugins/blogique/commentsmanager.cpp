/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2013  Oleg Linkin <MaledictusDeMagog@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "commentsmanager.h"
#include <QTimer>
#include "interfaces/blogique/ibloggingplatform.h"
#include "core.h"
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Blogique
{
	CommentsManager::CommentsManager (QObject *parent)
	: QObject (parent)
	, CommentsCheckingTimer_ (new QTimer (this))
	{
		XmlSettingsManager::Instance ().RegisterObject ("CheckingCommentsEnabled",
				this, "handleCommentsCheckingChanged");
		XmlSettingsManager::Instance ().RegisterObject ("UpdateCommentsInterval",
				this, "handleCommentsCheckingTimerChanged");
		connect (CommentsCheckingTimer_,
				SIGNAL (timeout ()),
				this,
				SLOT (checkForComments ()));
		handleCommentsCheckingTimerChanged ();
	}

	QList<CommentEntry> CommentsManager::GetComments () const
	{
		return RecentComments_.toList ();
	}

	void CommentsManager::checkForComments ()
	{
		for (auto acc : Core::Instance ().GetAccounts ())
			acc->RequestRecentComments ();
	}

	void CommentsManager::handleCommentsCheckingChanged ()
	{
		if (!XmlSettingsManager::Instance ().Property ("CheckingCommentsEnabled", true).toBool () &&
				CommentsCheckingTimer_->isActive ())
			CommentsCheckingTimer_->stop ();
	}

	void CommentsManager::handleCommentsCheckingTimerChanged ()
	{
		if (XmlSettingsManager::Instance ().Property ("CheckingCommentsEnabled", true).toBool ())
			CommentsCheckingTimer_->start (XmlSettingsManager::Instance ()
					.property ("UpdateCommentsInterval").toInt () * 60 * 1000);
		else if (CommentsCheckingTimer_->isActive ())
			CommentsCheckingTimer_->stop ();
	}

	void CommentsManager::handleGotRecentComments (const QList<CommentEntry>& comments)
	{
		for (const auto& comment : comments)
			RecentComments_ << comment;
		emit commentsUpdated ();
	}

	void CommentsManager::handleCommentsDeleted (const QList<qint64>& ids)
	{
		auto account = qobject_cast<IAccount*> (sender ());
		if (!account)
			return;

		for (auto id : ids)
		{
			CommentEntry ce;
			ce.AccountID_ = account->GetAccountID ();
			ce.CommentID_ = id;
			RecentComments_.remove (ce);
		}
		emit commentsUpdated ();
	}

}
}
