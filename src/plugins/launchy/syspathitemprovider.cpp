/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "syspathitemprovider.h"
#include <QStandardItemModel>
#include <QTimer>
#include <QtDebug>
#include <QProcess>
#include <util/sys/paths.h>
#include "modelroles.h"

namespace LeechCraft
{
namespace Launchy
{
	SysPathItemProvider::SysPathItemProvider (QStandardItemModel *model, QObject *parent)
	: QObject (parent)
	, Model_ (model)
	, SearchPathScheduled_ (false)
	, PathItem_ (new QStandardItem)
	{
		PathItem_->setData (QString (), ModelRoles::ItemIcon);
		PathItem_->setData (QStringList ("X-Console"), ModelRoles::ItemNativeCategories);
		PathItem_->setData (false, ModelRoles::IsItemFavorite);

		auto executor = [this] () -> void
		{
			const auto& cmd = PathItem_->data (ModelRoles::ItemID).toString ();
			if (!cmd.isEmpty ())
				QProcess::startDetached (cmd);
		};
		PathItem_->setData (QVariant::fromValue<Executor_f> (executor),
				ModelRoles::ExecutorFunctor);
	}

	void SysPathItemProvider::HandleQuery (const QString& query)
	{
		CurrentQuery_ = query;
		ScheduleSearch ();
	}

	void SysPathItemProvider::ScheduleSearch ()
	{
		if (SearchPathScheduled_)
			return;

		SearchPathScheduled_ = true;
		QTimer::singleShot (200,
				this,
				SLOT (searchPath ()));
	}

	void SysPathItemProvider::searchPath ()
	{
		SearchPathScheduled_ = false;

		const auto& candidate = Util::FindInSystemPath (CurrentQuery_,
				Util::GetSystemPaths (),
				[] (const QFileInfo& fi) { return fi.isExecutable () && fi.isFile (); });

		if (candidate.isEmpty ())
		{
			if (PathItem_->row () != -1)
				Model_->takeRow (PathItem_->row ());
			return;
		}

		PathItem_->setData (CurrentQuery_, ModelRoles::ItemName);
		PathItem_->setData (CurrentQuery_, ModelRoles::ItemDescription);
		PathItem_->setData (candidate, ModelRoles::ItemID);
		if (PathItem_->row () == -1)
			Model_->appendRow (PathItem_);
	}
}
}
