/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "scroblibre.h"
#include <QIcon>
#include <xmlsettingsdialog/xmlsettingsdialog.h>
#include "xmlsettingsmanager.h"
#include "accountsmanager.h"
#include "authmanager.h"

namespace LeechCraft
{
namespace Scroblibre
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		AccMgr_ = new AccountsManager (this);
		AuthMgr_ = new AuthManager (proxy, this);
		connect (AccMgr_,
				SIGNAL (accountAdded (QUrl, QString)),
				AuthMgr_,
				SLOT (handleAccountAdded (QUrl, QString)));
		connect (AccMgr_,
				SIGNAL (accountRemoved (QUrl, QString)),
				AuthMgr_,
				SLOT (handleAccountRemoved (QUrl, QString)));

		XSD_.reset (new Util::XmlSettingsDialog);
		XSD_->RegisterObject (&XmlSettingsManager::Instance (), "scroblibresettings.xml");
		XSD_->SetDataSource ("AccountsView", AccMgr_->GetModel ());

		connect (AuthMgr_,
				SIGNAL (delegateEntity (LeechCraft::Entity, int*, QObject**)),
				this,
				SIGNAL (delegateEntity (LeechCraft::Entity, int*, QObject**)));
		connect (AuthMgr_,
				SIGNAL (gotEntity (LeechCraft::Entity)),
				this,
				SIGNAL (gotEntity (LeechCraft::Entity)));
	}

	void Plugin::SecondInit ()
	{
		AccMgr_->LoadAccounts ();
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.Scroblibre";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "Scroblibre";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Multiaccount scrobbler for services supporting Scrobbler API 1.2.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	Util::XmlSettingsDialog_ptr Plugin::GetSettingsDialog () const
	{
		return XSD_;
	}

	QString Plugin::GetServiceName () const
	{
		return "Scrobbler API 1.2";
	}

	void Plugin::NowPlaying (const Media::AudioInfo& info)
	{
		AuthMgr_->HandleAudio (info);
	}

	void Plugin::PlaybackStopped ()
	{
		AuthMgr_->HandleStopped ();
	}

	void Plugin::LoveCurrentTrack ()
	{
	}

	void Plugin::BanCurrentTrack ()
	{
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_scroblibre, LeechCraft::Scroblibre::Plugin);
