/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QObject>
#include <interfaces/structures.h>
#include <interfaces/core/icoreproxy.h>
#include "account.h"

class QAbstractItemModel;
class QStandardItemModel;
class QModelIndex;

namespace LeechCraft
{
namespace Util
{
	class ResourceLoader;
}

namespace Snails
{
	class Storage;
	class ProgressManager;

	class Core : public QObject
	{
		Q_OBJECT

		ICoreProxy_ptr Proxy_;

		QStandardItemModel *AccountsModel_;
		QList<Account_ptr> Accounts_;

		Storage *Storage_;
		ProgressManager *ProgressManager_;

		std::shared_ptr<Util::ResourceLoader> MsgView_;

		Core ();
	public:
		static Core& Instance ();
		void Release ();

		void SetProxy (ICoreProxy_ptr);
		ICoreProxy_ptr GetProxy () const;
		void SendEntity (const Entity&);

		QAbstractItemModel* GetAccountsModel () const;
		QList<Account_ptr> GetAccounts () const;
		Account_ptr GetAccount (const QModelIndex&) const;

		Storage* GetStorage () const;
		ProgressManager* GetProgressManager () const;
		QString GetMsgViewTemplate () const;

		void PrepareReplyTab (Message_ptr, Account_ptr);

		void AddAccount (Account_ptr);
	private:
		void AddAccountImpl (Account_ptr);
		void LoadAccounts ();
	private slots:
		void saveAccounts () const;
	signals:
		void gotEntity (const LeechCraft::Entity&);
		void delegateEntity (const LeechCraft::Entity&, int*, QObject**);

		void gotTab (const QString&, QWidget*);
	};
}
}
