/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "callchatwidget.h"
#include <QTimer>

namespace LeechCraft
{
namespace Azoth
{
	CallChatWidget::CallChatWidget (QObject *call, QWidget *parent)
	: QWidget (parent)
	, CallObject_ (call)
	, Call_ (qobject_cast<IMediaCall*> (call))
	{
		Ui_.setupUi (this);
		
		Ui_.StatusLabel_->setText (tr ("Initializing..."));
		
		connect (call,
				SIGNAL (destroyed ()),
				this,
				SLOT (scheduleDelete ()));
		
		connect (call,
				SIGNAL (stateChanged (LeechCraft::Azoth::IMediaCall::State)),
				this,
				SLOT (handleStateChanged (LeechCraft::Azoth::IMediaCall::State)));
	}
	
	void CallChatWidget::handleStateChanged (IMediaCall::State state)
	{
		switch (state)
		{
		case IMediaCall::SConnecting:
			Ui_.StatusLabel_->setText (tr ("Connecting..."));
			break;
		case IMediaCall::SActive:
			Ui_.StatusLabel_->setText (tr ("Active"));
			break;
		case IMediaCall::SDisconnecting:
			Ui_.StatusLabel_->setText (tr ("Disconnecting"));
			break;
		case IMediaCall::SFinished:
			scheduleDelete ();
			break;
		}
	}
	
	void CallChatWidget::on_AcceptButton__released ()
	{
		Call_->Accept ();
	}
	
	void CallChatWidget::on_HangupButton__released ()
	{
		Call_->Hangup ();
	}
	
	void CallChatWidget::scheduleDelete ()
	{
		Ui_.StatusLabel_->setText (tr ("No active call"));
		QTimer::singleShot (3000,
				this,
				SLOT (deleteLater ()));
	}
}
}
