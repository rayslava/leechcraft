/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "keyboardrosterfixer.h"
#include <QKeyEvent>
#include <QApplication>
#include <QTreeView>
#include <QLineEdit>

namespace LeechCraft
{
namespace Azoth
{
	KeyboardRosterFixer::KeyboardRosterFixer (QLineEdit *edit, QTreeView *view, QObject *parent)
	: QObject (parent)
	, Edit_ (edit)
	, View_ (view)
	, IsSearching_ (false)
	{
		Edit_->installEventFilter (this);
	}

	bool KeyboardRosterFixer::eventFilter (QObject*, QEvent *e)
	{
		if (e->type () != QEvent::KeyPress &&
			e->type () != QEvent::KeyRelease)
			return false;

		if (IsSearching_ &&
				Edit_->text ().isEmpty ())
			IsSearching_ = false;

		QKeyEvent *ke = static_cast<QKeyEvent*> (e);
		if (!IsSearching_)
		{
			switch (ke->key ())
			{
			case Qt::Key_Space:
			case Qt::Key_Right:
			case Qt::Key_Left:
			case Qt::Key_Delete:
				qApp->sendEvent (View_, e);
				return true;
			default:
				;
			}
		}

		switch (ke->key ())
		{
		case Qt::Key_Down:
		case Qt::Key_Up:
		case Qt::Key_PageDown:
		case Qt::Key_PageUp:
		case Qt::Key_Enter:
		case Qt::Key_Return:
		case Qt::Key_Escape:
			IsSearching_ = false;
			qApp->sendEvent (View_, e);
			return true;
		default:
			IsSearching_ = true;
			return false;
		}
	}
}
}
