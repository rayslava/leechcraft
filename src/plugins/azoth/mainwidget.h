/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AZOTH_MAINWIDGET_H
#define PLUGINS_AZOTH_MAINWIDGET_H
#include <QWidget>
#include "interfaces/azoth/iaccount.h"
#include "ui_mainwidget.h"

class QToolButton;
class QToolBar;
class QMenu;

namespace LeechCraft
{
namespace Azoth
{
	class SortFilterProxyModel;
	class ConsoleWidget;
	class ServiceDiscoveryWidget;
	class MicroblogsTab;
	class AccountActionsManager;
	class StatusChangeMenuManager;

	class MainWidget : public QWidget
	{
		Q_OBJECT

		Ui::MainWidget Ui_;

		QMenu *MainMenu_;
		QToolButton *MenuButton_;
		SortFilterProxyModel *ProxyModel_;

		QToolButton *FastStatusButton_;
		QAction *ActionCLMode_;
		QAction *ActionShowOffline_;
		QAction *ActionDeleteSelected_;
		QToolBar *BottomBar_;

		QMenu *MenuChangeStatus_;
		QMenu *TrayChangeStatus_;

		AccountActionsManager *AccountActsMgr_;

		QMap<QString, bool> FstLevelExpands_;
		QMap<QString, QMap<QString, bool>> SndLevelExpands_;

		StatusChangeMenuManager *StatusMenuMgr_;
	public:
		MainWidget (QWidget* = 0);

		QList<QAction*> GetMenuActions ();
		QMenu* GetChangeStatusMenu () const;
	private:
		void CreateMenu ();
	public slots:
		void handleAccountVisibilityChanged ();
	private slots:
		void updateFastStatusButton (LeechCraft::Azoth::State);
		void treeActivated (const QModelIndex&);
		void showAllUsersList ();
		void on_CLTree__customContextMenuRequested (const QPoint&);

		void handleChangeStatusRequested ();
		void fastStateChangeRequested ();

		void handleEntryActivationType ();

		void handleCatRenameTriggered ();
		void handleSendGroupMsgTriggered ();
		void handleRemoveChildrenTriggered ();

		void handleManageBookmarks ();
		void handleAddAccountRequested ();
		void handleAddContactRequested ();

		void handleShowOffline (bool);
		void clearFilter ();

		void handleDeleteSelected ();

		void handleEntryMadeCurrent (QObject*);
		void handleEntryLostCurrent (QObject*);
		void resetToWholeMode ();
		void handleCLMode (bool);
		void menuBarVisibilityToggled ();
		void handleStatusIconsChanged ();

		void handleRowsInserted (const QModelIndex&, int, int);
		void rebuildTreeExpansions ();
		void expandIndex (const QPersistentModelIndex&);
		void on_CLTree__expanded (const QModelIndex&);
		void on_CLTree__collapsed (const QModelIndex&);
	signals:
		void gotConsoleWidget (ConsoleWidget*);
		void gotSDWidget (ServiceDiscoveryWidget*);
		void gotMicroblogsTab (MicroblogsTab*);
	};
}
}

#endif
