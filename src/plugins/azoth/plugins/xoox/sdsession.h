/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AZOTH_PLUGINS_XOOX_SDSESSION_H
#define PLUGINS_AZOTH_PLUGINS_XOOX_SDSESSION_H
#include <boost/function.hpp>
#include <QObject>
#include <QHash>
#include <QStringList>
#include <QXmppDiscoveryIq.h>
#include <interfaces/azoth/ihaveservicediscovery.h>

class QStandardItemModel;
class QStandardItem;

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	class GlooxAccount;
	class SDModel;

	class SDSession : public QObject
					, public ISDSession
	{
		Q_OBJECT
		Q_INTERFACES (LeechCraft::Azoth::ISDSession)

		QString Query_;

		SDModel *Model_;
		GlooxAccount *Account_;
		QHash<QString, QHash<QString, QStandardItem*>> JID2Node2Item_;

		struct ItemInfo
		{
			QStringList Caps_;
			QList<QXmppDiscoveryIq::Identity> Identities_;
			QString JID_;
			QString Node_;
		};
		QHash<QStandardItem*, ItemInfo> Item2Info_;

		typedef boost::function<void (const ItemInfo&)> ItemAction_t;
		QHash<QByteArray, ItemAction_t> ID2Action_;

		enum Columns
		{
			CName,
			CJID,
			CNode
		};
	public:
		enum DataRoles
		{
			DRFetchedMore = Qt::UserRole + 1,
			DRJID,
			DRNode
		};

		SDSession (GlooxAccount*);

		void SetQuery (const QString&);
		QString GetQuery () const;
		QAbstractItemModel* GetRepresentationModel () const;
		QList<QPair<QByteArray, QString>> GetActionsFor (const QModelIndex&);
		void ExecuteAction (const QModelIndex&, const QByteArray&);

		void HandleInfo (const QXmppDiscoveryIq&);
		void HandleItems (const QXmppDiscoveryIq&);

		void QueryItem (QStandardItem*);
	private:
		void ViewVCard (const ItemInfo&);
		void AddToRoster (const ItemInfo&);
		void Register (const ItemInfo&);
		void ExecuteAdHoc (const ItemInfo&);
		void JoinConference (const ItemInfo&);
	private slots:
		void handleRegistrationForm (const QXmppIq&);
	};
}
}
}

#endif
