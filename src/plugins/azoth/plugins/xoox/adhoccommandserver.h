/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AZOTH_PLUGINS_XOOX_ADHOCCOMMANDSERVER_H
#define PLUGINS_AZOTH_PLUGINS_XOOX_ADHOCCOMMANDSERVER_H
#include <functional>
#include <QSet>
#include <QXmppClientExtension.h>
#include <QXmppDataForm.h>
#include <QXmppDiscoveryIq.h>

class QXmppDiscoveryIq;

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	class ClientConnection;

	class AdHocCommandServer : public QXmppClientExtension
	{
		Q_OBJECT

		ClientConnection *Conn_;

		QMap<QString, QXmppDiscoveryIq::Item> XEP0146Items_;

		typedef std::function<void (const QDomElement&)> NodeActor_t;
		QMap<QString, NodeActor_t> NodeInfos_;
		typedef std::function<void (const QDomElement&,
				const QString&, const QXmppDataForm&)> NodeSubmitHandler_t;
		QMap<QString, NodeSubmitHandler_t> NodeSubmitHandlers_;

		QMap<QString, QStringList> PendingSessions_;
	public:
		AdHocCommandServer (ClientConnection*);

		bool handleStanza (const QDomElement&);
	private:
		bool HandleDiscoIq (const QDomElement&);
		bool HandleIqSet (const QDomElement&);

		void Send (const QXmppDataForm&, const QDomElement&, const QString&);
		void SendCompleted (const QDomElement&, const QString&, const QString&);

		void ChangeStatusInfo (const QDomElement&);
		void ChangeStatusSubmitted (const QDomElement&,
				const QString&, const QXmppDataForm&);
		void LeaveGroupchatsInfo (const QDomElement&);
		void LeaveGroupchatsSubmitted (const QDomElement&,
				const QString&, const QXmppDataForm&);
		void Forward (const QDomElement&);
		void AddTaskInfo (const QDomElement&);
		void AddTaskSubmitted (const QDomElement&,
				const QString&, const QXmppDataForm&);
	};
}
}
}

#endif
