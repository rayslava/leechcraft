/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "affiliationselectordialog.h"
#include <QtDebug>

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	AffiliationSelectorDialog::AffiliationSelectorDialog (QWidget *parent)
	: QDialog (parent)
	{
		Ui_.setupUi (this);
	}

	QString AffiliationSelectorDialog::GetJID () const
	{
		return Ui_.JIDEdit_->text ();
	}

	void AffiliationSelectorDialog::SetJID (const QString& jid)
	{
		Ui_.JIDEdit_->setText (jid);
	}

	QXmppMucItem::Affiliation AffiliationSelectorDialog::GetAffiliation () const
	{
		if (Ui_.Owner_->isChecked ())
			return QXmppMucItem::OwnerAffiliation;
		else if (Ui_.Admin_->isChecked ())
			return QXmppMucItem::AdminAffiliation;
		else if (Ui_.Member_->isChecked ())
			return QXmppMucItem::MemberAffiliation;
		else if (Ui_.Banned_->isChecked ())
			return QXmppMucItem::OutcastAffiliation;
		else
			return QXmppMucItem::NoAffiliation;
	}

	void AffiliationSelectorDialog::SetAffiliation (QXmppMucItem::Affiliation aff)
	{
		switch (aff)
		{
		case QXmppMucItem::OwnerAffiliation:
			Ui_.Owner_->setChecked (true);
			break;
		case QXmppMucItem::AdminAffiliation:
			Ui_.Admin_->setChecked (true);
			break;
		case QXmppMucItem::MemberAffiliation:
			Ui_.Member_->setChecked (true);
			break;
		case QXmppMucItem::NoAffiliation:
			Ui_.None_->setChecked (true);
			break;
		case QXmppMucItem::OutcastAffiliation:
			Ui_.Banned_->setChecked (true);
			break;
		default:
			qWarning () << Q_FUNC_INFO
					<< "unknown affiliation"
					<< aff;
			break;
		}
	}

	QString AffiliationSelectorDialog::GetReason () const
	{
		return Ui_.ReasonEdit_->text ();
	}

	void AffiliationSelectorDialog::SetReason (const QString& reason)
	{
		Ui_.ReasonEdit_->setText (reason);
	}
}
}
}
