/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "joingroupchatwidget.h"
#include <QtDebug>
#include "glooxaccount.h"
#include "glooxprotocol.h"
#include "core.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	JoinGroupchatWidget::JoinGroupchatWidget (QWidget *parent)
	: QWidget (parent)
	, SelectedAccount_ (0)
	{
		Ui_.setupUi (this);
		connect (Ui_.Nickname_,
				SIGNAL (textChanged (const QString&)),
				this,
				SLOT (checkValidity ()));
		connect (Ui_.Server_,
				SIGNAL (textChanged (const QString&)),
				this,
				SLOT (checkValidity ()));
		connect (Ui_.Room_,
				SIGNAL (textChanged (const QString&)),
				this,
				SLOT (checkValidity ()));
	}

	QString JoinGroupchatWidget::GetNickname () const
	{
		return Ui_.Nickname_->text ();
	}

	QString JoinGroupchatWidget::GetRoom () const
	{
		return Ui_.Room_->text ();
	}

	QString JoinGroupchatWidget::GetServer () const
	{
		return Ui_.Server_->text ();
	}

	void JoinGroupchatWidget::AccountSelected (QObject *accObj)
	{
		GlooxAccount *acc = qobject_cast<GlooxAccount*> (accObj);
		if (!acc)
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to cast"
					<< accObj
					<< "to GlooxAccount";
			return;
		}

		SelectedAccount_ = acc;
		Ui_.Nickname_->setText (acc->GetOurNick ());
	}

	void JoinGroupchatWidget::Join (QObject *accObj)
	{
		GlooxAccount *acc = qobject_cast<GlooxAccount*> (accObj);
		if (!acc)
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to cast"
					<< accObj
					<< "to GlooxAccount";
			return;
		}

		SelectedAccount_ = acc;
		acc->JoinRoom (GetServer (), GetRoom (), GetNickname ());
	}

	void JoinGroupchatWidget::Cancel ()
	{
	}

	QVariantMap JoinGroupchatWidget::GetIdentifyingData () const
	{
		QVariantMap result;
		result ["HumanReadableName"] = QString ("%2@%3 (%1)")
				.arg (GetNickname ())
				.arg (GetRoom ())
				.arg (GetServer ());
		result ["AccountID"] = SelectedAccount_->GetAccountID ();
		result ["Nick"] = GetNickname ();
		result ["Room"] = GetRoom ();
		result ["Server"] = GetServer ();
		return result;
	}

	void JoinGroupchatWidget::SetIdentifyingData (const QVariantMap& data)
	{
		const QString& nick = data ["Nick"].toString ();
		const QString& room = data ["Room"].toString ();
		const QString& server = data ["Server"].toString ();

		if (!nick.isEmpty ())
			Ui_.Nickname_->setText (nick);
		if (!room.isEmpty ())
			Ui_.Room_->setText (room);
		if (!server.isEmpty ())
			Ui_.Server_->setText (server);

		checkValidity ();
	}

	void JoinGroupchatWidget::checkValidity ()
	{
		bool notOk = Ui_.Nickname_->text ().isEmpty () ||
				Ui_.Room_->text ().isEmpty () ||
				Ui_.Server_->text ().isEmpty ();
		emit validityChanged (!notOk);
	}

	void JoinGroupchatWidget::on_ViewRooms__released ()
	{
		if (!SelectedAccount_)
			return;

		const QString& server = Ui_.Server_->text ();
		SelectedAccount_->CreateSDForResource (server);
	}

	void JoinGroupchatWidget::on_Server__textChanged (const QString& str)
	{
		Ui_.ViewRooms_->setEnabled (SelectedAccount_ && !str.isEmpty ());
	}
}
}
}
