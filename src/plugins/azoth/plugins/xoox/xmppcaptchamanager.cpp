/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "xmppcaptchamanager.h"
#include <QDomElement>
#include <QXmppClient.h>
#include "xmppcaptchaiq.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	const QString NSCaptcha = "urn:xmpp:captcha";

	bool XMPPCaptchaManager::handleStanza (const QDomElement& stanza)
	{
		if (stanza.tagName () != "message")
			return false;

		const auto& captchaStanza = stanza.firstChildElement ("captcha");

		if (captchaStanza.namespaceURI () != NSCaptcha)
			return false;

		const auto& dataFormStanza = captchaStanza.firstChildElement ("x");
		if (dataFormStanza.isNull ())
			return false;

		QXmppDataForm dataForm;
		dataForm.parse (dataFormStanza);

		if (dataForm.isNull ())
			return false;

		emit captchaFormReceived (stanza.attribute ("from"), dataForm);
		return true;
	}

	QString XMPPCaptchaManager::SendResponse (const QString& to, const QXmppDataForm& form)
	{
		XMPPCaptchaIq request;
		request.setType (QXmppIq::Set);
		request.setTo (to);
		request.SetDataForm (form);
		if(client ()->sendPacket (request))
			return request.id ();
		else
			return QString ();
	}

}
}
}
