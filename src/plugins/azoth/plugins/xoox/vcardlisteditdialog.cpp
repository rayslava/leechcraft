/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "vcardlisteditdialog.h"
#include <QStandardItemModel>
#include <QInputDialog>

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	VCardListEditDialog::VCardListEditDialog (const QStringList& options,
			QWidget *parent)
	: QDialog (parent)
	, Model_ (new QStandardItemModel (this))
	{
		QStringList headers (tr ("Item"));
		headers << options;
		Model_->setHorizontalHeaderLabels (headers);

		Ui_.setupUi (this);
		Ui_.Items_->setModel (Model_);
	}

	void VCardListEditDialog::AddItems (const QList<QPair<QString, QStringList>>& items)
	{
		const int rc = Model_->columnCount ();
		Q_FOREACH (const auto& item, items)
		{
			QList<QStandardItem*> row;
			row << new QStandardItem (item.first);

			const auto& opts = item.second;
			for (int i = 1; i < rc; ++i)
			{
				const bool checked = opts.contains (Model_->horizontalHeaderItem (i)->text ());
				auto item = new QStandardItem;
				item->setCheckable (true);
				item->setCheckState (checked ? Qt::Checked : Qt::Unchecked);
				row << item;
			}

			Model_->appendRow (row);
		}
	}

	QList<QPair<QString, QStringList>> VCardListEditDialog::GetItems () const
	{
		QList<QPair<QString, QStringList>> result;

		const int rc = Model_->columnCount ();
		for (int i = 0, rows = Model_->rowCount (); i < rows; ++i)
		{
			const auto& text = Model_->item (i, 0)->text ();
			QStringList options;
			for (int j = 1; j < rc; ++j)
			{
				if (Model_->item (i, j)->checkState () == Qt::Checked)
					options << Model_->horizontalHeaderItem (j)->text ();
			}
			result << qMakePair (text, options);
		}

		return result;
	}

	void VCardListEditDialog::on_Add__released ()
	{
		const auto& str = QInputDialog::getText (this,
				"LeechCraft",
				tr ("Enter the new item:"));
		if (str.isEmpty ())
			return;

		QList<QPair<QString, QStringList>> list;
		list << qMakePair (str, QStringList ());
		AddItems (list);
	}

	void VCardListEditDialog::on_Remove__released ()
	{
		const auto& idx = Ui_.Items_->currentIndex ();
		if (!idx.isValid ())
			return;

		Model_->removeRow (idx.row ());
	}
}
}
}
