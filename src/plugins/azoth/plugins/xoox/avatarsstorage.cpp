/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "avatarsstorage.h"
#include <util/util.h>
#include <QTimer>

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	AvatarsStorage::AvatarsStorage (QObject *parent)
	: QObject (parent)
	{
		AvatarsDir_ = Util::CreateIfNotExists ("azoth/xoox/hashed_avatars");

		QTimer::singleShot (30000, this, SLOT (collectOldAvatars ()));
	}

	/** The clients are free to not call this function if they know the avatar is
	 * already stored. That means that we should be beware of this when implementing
	 * caching, if we'd ever do.
	 *
	 * See EntryBase::SetVCard() for example.
	 */
	void AvatarsStorage::StoreAvatar (const QImage& image, const QByteArray& hash)
	{
		QFile file (AvatarsDir_.absoluteFilePath (hash));
		if (file.exists () && file.size ())
			return;

		if (!file.open (QIODevice::WriteOnly | QIODevice::Truncate))
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to open file"
					<< file.fileName ()
					<< "for writing";
			return;
		}

		image.save (&file, "PNG", 100);
	}

	QImage AvatarsStorage::GetAvatar (const QByteArray& hash) const
	{
		return QImage (AvatarsDir_.absoluteFilePath (hash));
	}

	void AvatarsStorage::collectOldAvatars ()
	{
		auto list = AvatarsDir_.entryList (QDir::Files, QDir::Time | QDir::Reversed);
		while (list.size () > 4000)
			AvatarsDir_.remove (list.takeLast ());
	}
}
}
}
