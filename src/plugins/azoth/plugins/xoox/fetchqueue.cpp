/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "fetchqueue.h"
#include <QTimer>
#include <QtDebug>

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	FetchQueue::FetchQueue (std::function<void (const QString&, bool)> func,
			int timeout, int perShot, QObject *parent)
	: QObject (parent)
	, FetchTimer_ (new QTimer (this))
	, FetchFunction_ (func)
	, PerShot_ (perShot)
	{
		FetchTimer_->setInterval (timeout);
		connect (FetchTimer_,
				SIGNAL (timeout ()),
				this,
				SLOT (handleFetch ()));
	}

	void FetchQueue::Schedule (const QString& string, FetchQueue::Priority prio, bool report)
	{
		if (report)
			Reports_ << string;

		if (Queue_.contains (string))
			return;

		switch (prio)
		{
		case PHigh:
			Queue_.prepend (string);
			break;
		case PLow:
			Queue_.append (string);
			break;
		}

		if (!FetchTimer_->isActive ())
		{
			QTimer::singleShot (100,
					this,
					SLOT (handleFetch ()));
			FetchTimer_->start ();
		}
	}

	void FetchQueue::Clear ()
	{
		Queue_.clear ();
		Reports_.clear ();

		if (FetchTimer_->isActive ())
			FetchTimer_->stop ();
	}

	void FetchQueue::handleFetch ()
	{
		int num = std::min (PerShot_, Queue_.size ());
		while (num--)
		{
			const auto& str = Queue_.takeFirst ();
			FetchFunction_ (str, Reports_.remove (str));
		}

		if (Queue_.isEmpty () &&
				FetchTimer_->isActive ())
			FetchTimer_->stop ();
	}
}
}
}
