/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "pastedialog.h"
#include "pasteservicefactory.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Autopaste
{
	PasteDialog::PasteDialog (QWidget *parent)
	: QDialog (parent)
	, Choice_ (Choice::Cancel)
	{
		Ui_.setupUi (this);

		Q_FOREACH (const auto& info, PasteServiceFactory ().GetInfos ())
		  Ui_.ServiceCombo_->addItem (info.Icon_, info.Name_);
	}

	PasteDialog::Choice PasteDialog::GetChoice () const
	{
		return Choice_;
	}

	PasteServiceFactory::Creator_f PasteDialog::GetCreator () const
	{
		return PasteServiceFactory ().GetInfos ().at (Ui_.ServiceCombo_->currentIndex ()).Creator_;
	}

	QString PasteDialog::GetCreatorName () const
	{
		return Ui_.ServiceCombo_->currentText ();
	}

	void PasteDialog::SetCreatorName (const QString& name)
	{
		const auto idx = Ui_.ServiceCombo_->findText (name);
		if (idx >= 0)
			Ui_.ServiceCombo_->setCurrentIndex (idx);
	}

	Highlight PasteDialog::GetHighlight () const
	{
		return static_cast<Highlight> (Ui_.HighlightCombo_->currentIndex ());
	}

	void PasteDialog::SetHighlight (Highlight highEnum)
	{
		auto high = static_cast<int> (highEnum);
		if (high >= 0 && high < Ui_.HighlightCombo_->count ())
			Ui_.HighlightCombo_->setCurrentIndex (high);
	}

	void PasteDialog::on_ButtonBox__clicked (QAbstractButton *button)
	{
		switch (Ui_.ButtonBox_->standardButton (button))
		{
		case QDialogButtonBox::Yes:
			Choice_ = Choice::Yes;
			break;
		case QDialogButtonBox::No:
			Choice_ = Choice::No;
			break;
		default:
			Choice_ = Choice::Cancel;
			break;
		}
	}
}
}
}
