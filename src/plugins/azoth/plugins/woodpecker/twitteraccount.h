/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2013  Slava Barinov <rayslava@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 **********************************************************************/

#pragma once

#include <QObject>
#include <interfaces/azoth/iaccount.h>
#include <interfaces/core/icoreproxy.h>
#include "structures.h"
#include "twitterentry.h"
#include "twitterprotocol.h"
#include "twittermessage.h"
#include "woodpecker.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Woodpecker
{
	class TwitterProtocol;
	
	class TwitterAccount 	: public QObject
							, public IAccount
	{
		Q_OBJECT
		Q_INTERFACES (LeechCraft::Azoth::IAccount)
		const ICoreProxy_ptr CoreProxy_;

		TwitterProtocol * const Proto_;
		const QByteArray ID_;

		QString Name_;

		QHash<qulonglong, TwitterEntry*> Entries_;
		QHash<qulonglong, ListInfo> ID2ListInfo_;
		
		EntryStatus State_;
	public:
		TwitterAccount (const QString& name, TwitterProtocol *proto, ICoreProxy_ptr proxy,
						const QByteArray& id);

		QByteArray Serialize () const;
		static TwitterAccount* Deserialize (const QByteArray&, TwitterProtocol*, ICoreProxy_ptr);

		ListInfo GetListInfo (qulonglong) const;

		void Send (TwitterEntry*, TwitterMessage*);

		ICoreProxy_ptr GetCoreProxy () const;

		QObject* GetQObject ();
		QObject* GetParentProtocol () const;
		AccountFeatures GetAccountFeatures () const;
		QList<QObject*> GetCLEntries ();

		QString GetAccountName () const;
		QString GetOurNick () const;
		void RenameAccount (const QString& name);
		QByteArray GetAccountID () const;
		QList<QAction*> GetActions () const;

		void QueryInfo (const QString& address);
		void OpenConfigurationDialog ();

		EntryStatus GetState () const;

		void ChangeState (const EntryStatus&);
		void Authorize (QObject*);
		void DenyAuth (QObject*);
		void RequestAuth (const QString&, const QString&, const QString&, const QStringList&);
		void RemoveEntry (QObject*);
		QObject* GetTransferManager () const;

	private slots:
		void handleLists (const QList<ListInfo>&);
		void handleUsers (const QList<UserInfo>&);
		void handleUserState (qulonglong, bool);
		void handleMessage (const MessageInfo&);
		void handleTypingNotification (qulonglong);

		void finishOffline ();

		void emitUpdateAcc ();
	signals:
		void accountRenamed (const QString&);
		void gotCLItems (const QList<QObject*>&);
		void removedCLItems (const QList<QObject*>&);
		void authorizationRequested (QObject*, const QString&);
		void itemSubscribed (QObject*, const QString&);
		void itemUnsubscribed (QObject*, const QString&);
		void itemUnsubscribed (const QString&, const QString&);
		void itemCancelledSubscription (QObject*, const QString&);
		void itemGrantedSubscription (QObject*, const QString&);
		void statusChanged (const EntryStatus&);
		void mucInvitationReceived (const QVariantMap&, const QString&, const QString&);
		void accountChanged (TwitterAccount*);
	};
}
}
}