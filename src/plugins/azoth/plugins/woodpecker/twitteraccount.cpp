/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2013  Slava Barinov <rayslava@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 **********************************************************************/

#include "twitteraccount.h"
#include <QUuid>
#include <QtDebug>
#include "twitterprotocol.h"
#include "twitterentry.h"
#include "twittermessage.h"
#include "structures.h"
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Woodpecker
{
	 TwitterAccount::TwitterAccount (const QString& name, TwitterProtocol *proto,
									 ICoreProxy_ptr proxy, const QByteArray& id)
	: QObject (proto)
	, CoreProxy_ (proxy)
	, Proto_ (proto)
	, ID_ (id.isEmpty () ? QUuid::createUuid ().toByteArray () : id)
	, Name_ (name)
	{
	}

	QByteArray TwitterAccount::Serialize () const
	{
		QByteArray result;
		QDataStream out (&result, QIODevice::WriteOnly);

		out << static_cast<quint8> (1)
				<< ID_
				<< Name_;

		return result;
	}

	TwitterAccount* TwitterAccount::Deserialize (const QByteArray& data, TwitterProtocol *proto, ICoreProxy_ptr proxy)
	{
		QDataStream in (data);

		quint8 version = 0;
		in >> version;
		if (version != 1)
		{
			qWarning () << Q_FUNC_INFO
					<< "unknown version"
					<< version;
			return nullptr;
		}

		QByteArray id;
		QString name;
		QByteArray cookies;

		in >> id >> name;

		return new TwitterAccount (name, proto, proxy, id);
	}

	ListInfo TwitterAccount::GetListInfo (qulonglong id) const
	{
		return ID2ListInfo_ [id];
	}

	void TwitterAccount::Send (TwitterEntry *entry, TwitterMessage *msg)
	{
		// TODO: Sending
	}

	ICoreProxy_ptr TwitterAccount::GetCoreProxy () const
	{
		return CoreProxy_;
	}

	QObject* TwitterAccount::GetQObject ()
	{
		return this;
	}

	QObject* TwitterAccount::GetParentProtocol () const
	{
		return Proto_;
	}

	IAccount::AccountFeatures TwitterAccount::GetAccountFeatures () const
	{
		return AccountFeature::FRenamable;
	}

	QList<QObject*> TwitterAccount::GetCLEntries ()
	{
		QList<QObject*> result;
		result.reserve (Entries_.size ());
		std::copy (Entries_.begin (), Entries_.end (), std::back_inserter (result));
		return result;
	}

	QString TwitterAccount::GetAccountName () const
	{
		return Name_;
	}

	QString TwitterAccount::GetOurNick () const
	{
		return tr ("me");
	}

	void TwitterAccount::RenameAccount (const QString& name)
	{
		Name_ = name;
		emit accountRenamed (name);
		emit accountChanged (this);
	}

	QByteArray TwitterAccount::GetAccountID () const
	{
		return ID_;
	}

	QList<QAction*> TwitterAccount::GetActions () const
	{
		return {};
	}

	void TwitterAccount::QueryInfo (const QString&)
	{
	}

	void TwitterAccount::OpenConfigurationDialog ()
	{
	}

	EntryStatus TwitterAccount::GetState () const
	{
		return State_;
	}

	void TwitterAccount::ChangeState (const EntryStatus& status)
	{
		// TODO: Change state
		State_ = status;
		if (State_.State_ == SOnline)
		{
			QList<QObject*> newEntries;
			for (const auto& item : Proto_->GetParentProtocolPlugin ()->GetUserManager ()-> GetContainer ())
			{
				struct UserInfo ui;
				const TwitterUser *user = &item;
				ui.ID_ = user->GetID ();
				ui.Nick_ = user->GetUsername ();
				ui.FirstName_ = "";
				ui.LastName_ = "";
				ui.IsOnline_ = true;
				ui.Photo_ = user->GetAvatarUrl ();
				auto TE = new TwitterEntry(ui, user, this);
				auto *msg = new TwitterMessage(IMessage::Direction::In, IMessage::Type::ChatMessage, TE);
				msg->SetRichBody("<div id=\"message\"><b>Bold message: </b> message <img style='float:left;margin-right:4px' width='32px' height='32px' src='" + user->GetAvatarUrl ().toString () +  "'></div>");

				TE->Store(msg);
				if (! Entries_.contains(ui.ID_))
				{
					newEntries << TE;
					Entries_[ui.ID_] = TE;
				}
			}
			emit gotCLItems (newEntries);
			State_.State_ = SOnline;
		}
	}

	void TwitterAccount::Authorize (QObject*)
	{
	}

	void TwitterAccount::DenyAuth (QObject*)
	{
	}

	void TwitterAccount::RequestAuth (const QString&, const QString&, const QString&, const QStringList&)
	{
	}

	void TwitterAccount::RemoveEntry (QObject*)
	{
	}

	QObject* TwitterAccount::GetTransferManager () const
	{
		return nullptr;
	}

	void TwitterAccount::handleLists (const QList<ListInfo>& lists)
	{
		ID2ListInfo_.clear ();
		for (const auto& list : lists)
			ID2ListInfo_ [list.ID_] = list;
	}

	void TwitterAccount::handleUsers (const QList<UserInfo>& infos)
	{
		QList<QObject*> newEntries;
		QSet<int> newCountries;
		for (const auto& info : infos)
		{
			qDebug() << Q_FUNC_INFO << "Info: " << info.ID_;
			if (Entries_.contains (info.ID_))
			{
				qDebug() << " already got!";
				//Entries_ [info.ID_]->UpdateInfo (info);
				continue;
			}
			qDebug() << endl;
			auto user = Proto_->GetParentProtocolPlugin ()->GetUserManager ()->GetUser (info.ID_);

			auto entry = new TwitterEntry (info, user,  this);
			Entries_ [info.ID_] = entry;
			newEntries << entry;

			newCountries << info.Country_;
		}

		if (!newEntries.isEmpty ())
			emit gotCLItems (newEntries);
	}

	void TwitterAccount::handleUserState (qulonglong id, bool isOnline)
	{
		if (!Entries_.contains (id))
		{
			qWarning () << Q_FUNC_INFO
					<< "unknown user"
					<< id;
			return;
		}

		auto entry = Entries_.value (id);
		auto info = entry->GetInfo ();
		info.IsOnline_ = isOnline;
	}

	void TwitterAccount::handleMessage (const MessageInfo& info)
	{
		const auto from = info.From_;
		if (!Entries_.contains (from))
		{
			qWarning () << Q_FUNC_INFO
					<< "message from unknown user"
					<< from;
			return;
		}

		const auto entry = Entries_.value (from);
		entry->HandleMessage (info);
	}

	void TwitterAccount::handleTypingNotification (qulonglong uid)
	{
		if (!Entries_.contains (uid))
		{
			qWarning () << Q_FUNC_INFO
					<< "message from unknown user"
					<< uid;
			return;
		}

		const auto entry = Entries_.value (uid);
	}

	void TwitterAccount::finishOffline ()
	{
		emit removedCLItems (GetCLEntries ());
		qDeleteAll (Entries_);
		Entries_.clear ();
	}

	void TwitterAccount::emitUpdateAcc ()
	{
		emit accountChanged (this);
	}
}
}
}
