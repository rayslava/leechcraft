/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "zheetutil.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Zheet
{
namespace ZheetUtil
{
	std::string ToStd (const QString& str)
	{
		return str.toUtf8 ().constData ();
	}

	QString FromStd (const std::string& str)
	{
		return QString::fromUtf8 (str.c_str ());
	}

	MSN::BuddyStatus ToMSNState (State st)
	{
		switch (st)
		{
		case SOnline:
		case SChat:
			return MSN::STATUS_AVAILABLE;
		case SAway:
			return MSN::STATUS_AWAY;
		case SXA:
			return MSN::STATUS_IDLE;
		case SDND:
			return MSN::STATUS_BUSY;
		case SInvisible:
		default:
			return MSN::STATUS_INVISIBLE;
		}
	}

	State FromMSNState (MSN::BuddyStatus status)
	{
		switch (status)
		{
		case MSN::STATUS_AVAILABLE:
			return SOnline;
		case MSN::STATUS_BUSY:
		case MSN::STATUS_ONTHEPHONE:
			return SDND;
		case MSN::STATUS_IDLE:
			return SXA;
		case MSN::STATUS_AWAY:
		case MSN::STATUS_BERIGHTBACK:
		case MSN::STATUS_OUTTOLUNCH:
			return SAway;
		case MSN::STATUS_INVISIBLE:
			return SInvisible;
		default:
			return SOffline;
		}
	}
}
}
}
}
