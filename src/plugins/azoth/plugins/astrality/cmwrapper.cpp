/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "cmwrapper.h"
#include <QtDebug>
#include <ConnectionManager>
#include <PendingReady>
#include "protowrapper.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Astrality
{
	CMWrapper::CMWrapper (const QString& cmName, QObject *parent)
	: QObject (parent)
	, CM_ (Tp::ConnectionManager::create (cmName))
	{
		connect (CM_->becomeReady (),
				SIGNAL (finished (Tp::PendingOperation*)),
				this,
				SLOT (handleCMReady (Tp::PendingOperation*)));
	}

	QList<QObject*> CMWrapper::GetProtocols () const
	{
		QList<QObject*> result;
		Q_FOREACH (auto pw, ProtoWrappers_)
			result << pw;
		return result;
	}

	void CMWrapper::handleCMReady (Tp::PendingOperation *op)
	{
		if (op->isError ())
		{
			qWarning () << Q_FUNC_INFO
					<< CM_->name ()
					<< op->errorName ()
					<< op->errorMessage ();
			return;
		}

		qDebug () << Q_FUNC_INFO << CM_->name ();
		QList<QObject*> newProtoWrappers;
		Q_FOREACH (const QString& proto, CM_->supportedProtocols ())
		{
			qDebug () << "has protocol" << proto;
			if (proto == "jabber" || proto == "irc")
				continue;

			auto pw = new ProtoWrapper (CM_, proto, this);
			ProtoWrappers_ << pw;
			newProtoWrappers << pw;
		}

		emit gotProtoWrappers (newProtoWrappers);
	}
}
}
}
