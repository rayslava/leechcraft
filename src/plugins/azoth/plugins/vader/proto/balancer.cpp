/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "balancer.h"
#include <QTcpSocket>
#include <QtDebug>

namespace LeechCraft
{
namespace Azoth
{
namespace Vader
{
namespace Proto
{
	Balancer::Balancer (QObject *parent)
	: QObject (parent)
	{
	}

	void Balancer::GetServer ()
	{
		QTcpSocket *socket = new QTcpSocket (this);
		socket->connectToHost ("mrim.mail.ru", 443);
		connect (socket,
				SIGNAL (readyRead ()),
				this,
				SLOT (handleRead ()));
		connect (socket,
				SIGNAL (error (QAbstractSocket::SocketError)),
				this,
				SLOT (handleSocketError (QAbstractSocket::SocketError)));
	}

	void Balancer::handleRead ()
	{
		QTcpSocket *socket = qobject_cast<QTcpSocket*> (sender ());
		if (!socket->canReadLine ())
		{
			qWarning () << Q_FUNC_INFO
					<< "can't read line from socket, waiting more...";
			return;
		}

		socket->deleteLater ();

		const QByteArray& line = socket->readAll ().trimmed ();
		const int pos = line.indexOf (':');
		if (pos <= 0)
		{
			qWarning () << Q_FUNC_INFO
					<< "got"
					<< line;
			emit error ();
			return;
		}

		const QString& server = line.left (pos);
		const int port = line.mid (pos + 1).toInt ();

		if (port <= 0)
		{
			qWarning () << Q_FUNC_INFO
					<< "invalid port"
					<< server
					<< port
					<< line
					<< line.mid (pos + 1);
			emit error ();
			return;
		}

		emit gotServer (server, port);
		disconnect (socket,
				0,
				this,
				0);
	}

	void Balancer::handleSocketError (QAbstractSocket::SocketError code)
	{
		QTcpSocket *socket = qobject_cast<QTcpSocket*> (sender ());
		qWarning () << Q_FUNC_INFO
				<< "socket error"
				<< code
				<< socket->errorString ();
		socket->deleteLater ();
		emit error ();
	}
}
}
}
}
