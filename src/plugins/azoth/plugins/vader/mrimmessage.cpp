/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "mrimmessage.h"
#include "mrimbuddy.h"
#include "mrimaccount.h"
#include "proto/connection.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Vader
{
	MRIMMessage::MRIMMessage (Direction dir, MessageType mt, MRIMBuddy *buddy)
	: QObject (buddy)
	, Buddy_ (buddy)
	, A_ (qobject_cast<MRIMAccount*> (Buddy_->GetParentAccount ()))
	, Dir_ (dir)
	, MT_ (mt)
	, DateTime_ (QDateTime::currentDateTime ())
	, SendID_ (0)
	, IsDelivered_ (dir == DIn)
	{
		connect (A_->GetConnection (),
				SIGNAL (messageDelivered (quint32)),
				this,
				SLOT (checkMessageDelivery (quint32)));
	}

	void MRIMMessage::SetDelivered ()
	{
		if (IsDelivered_)
			return;

		IsDelivered_ = true;
		emit messageDelivered ();
	}

	QObject* MRIMMessage::GetQObject ()
	{
		return this;
	}

	void MRIMMessage::Send ()
	{
		if (Dir_ != Direction::DOut)
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to send incoming message";
			return;
		}

		SendID_ = A_->GetConnection ()->SendMessage (Buddy_->GetHumanReadableID (), Body_);
		Buddy_->HandleMessage (this);
	}

	void MRIMMessage::Store ()
	{
		Buddy_->HandleMessage (this);
	}

	IMessage::Direction MRIMMessage::GetDirection () const
	{
		return Dir_;
	}

	IMessage::MessageType MRIMMessage::GetMessageType () const
	{
		return MT_;
	}

	IMessage::MessageSubType MRIMMessage::GetMessageSubType () const
	{
		return MSTOther;
	}

	QObject* MRIMMessage::OtherPart () const
	{
		return Buddy_;
	}

	QString MRIMMessage::GetOtherVariant () const
	{
		return QString ();
	}

	QString MRIMMessage::GetBody () const
	{
		return Body_;
	}

	void MRIMMessage::SetBody (const QString& body)
	{
		Body_ = body;
	}

	QDateTime MRIMMessage::GetDateTime () const
	{
		return DateTime_;
	}

	void MRIMMessage::SetDateTime (const QDateTime& timestamp)
	{
		DateTime_ = timestamp;
	}

	bool MRIMMessage::IsDelivered () const
	{
		return IsDelivered_;
	}

	void MRIMMessage::checkMessageDelivery (quint32 id)
	{
		if (id != SendID_)
			return;

		SetDelivered ();
		disconnect (A_->GetConnection (),
				SIGNAL (messageDelivered (quint32)),
				this,
				SLOT (checkMessageDelivery (quint32)));
	}
}
}
}
