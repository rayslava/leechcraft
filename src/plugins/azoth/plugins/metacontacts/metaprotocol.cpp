/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "metaprotocol.h"
#include <QIcon>
#include "metaaccount.h"
#include "core.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Metacontacts
{
	MetaProtocol::MetaProtocol (QObject *parent)
	: QObject (parent)
	, ParentPlugin_ (parent)
	{
		Account_ = new MetaAccount (this);
	}

	MetaProtocol::~MetaProtocol ()
	{
		Release ();
	}

	void MetaProtocol::Release ()
	{
		if (!Account_)
			return;

		Core::Instance ().SetMetaAccount (0);
		delete Account_;
		Account_ = 0;
	}

	QObject* MetaProtocol::GetQObject ()
	{
		return this;
	}

	IProtocol::ProtocolFeatures MetaProtocol::GetFeatures () const
	{
		return PFNoAccountRegistration;
	}

	QList<QObject*> MetaProtocol::GetRegisteredAccounts ()
	{
		QList<QObject*> result;
		if (!Account_->GetCLEntries ().isEmpty ())
			result << Account_;
		return result;
	}

	QObject* MetaProtocol::GetParentProtocolPlugin () const
	{
		return ParentPlugin_;
	}

	QString MetaProtocol::GetProtocolName () const
	{
		return tr ("Metacontacts");
	}

	QIcon MetaProtocol::GetProtocolIcon () const
	{
		return QIcon ();
	}

	QByteArray MetaProtocol::GetProtocolID () const
	{
		return "org.LeechCraft.Azoth.Protocols.MetaProtocol";
	}

	QList<QWidget*> MetaProtocol::GetAccountRegistrationWidgets (IProtocol::AccountAddOptions)
	{
		return QList<QWidget*> ();
	}

	void MetaProtocol::RegisterAccount (const QString&, const QList<QWidget*>&)
	{
	}

	QWidget* MetaProtocol::GetMUCJoinWidget ()
	{
		return 0;
	}

	QWidget* MetaProtocol::GetMUCBookmarkEditorWidget ()
	{
		return 0;
	}

	void MetaProtocol::RemoveAccount (QObject*)
	{
	}
}
}
}
