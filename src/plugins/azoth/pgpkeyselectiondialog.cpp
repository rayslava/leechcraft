/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "pgpkeyselectiondialog.h"
#include "core.h"

namespace LeechCraft
{
namespace Azoth
{
	PGPKeySelectionDialog::PGPKeySelectionDialog (const QString& label,
			PGPKeySelectionDialog::Type type,
			const QCA::PGPKey& focusKey,
			QWidget *parent)
	: QDialog (parent)
	{
		Ui_.setupUi (this);
		Ui_.LabelText_->setText (label);

		switch (type)
		{
		case TPrivate:
			Keys_ = Core::Instance ().GetPrivateKeys ();
			break;
		case TPublic:
			Keys_ = Core::Instance ().GetPublicKeys ();
			break;
		}

		const auto& focusArr = !focusKey.isNull () ? focusKey.toArray () : QByteArray ();
		Q_FOREACH (const QCA::PGPKey& key, Keys_)
		{
			Ui_.KeyCombo_->addItem (key.primaryUserId () + " (" + key.keyId () + ")");
			if (key.toArray () == focusArr)
				Ui_.KeyCombo_->setCurrentIndex (Ui_.KeyCombo_->count () - 1);
		}
	}

	QCA::PGPKey PGPKeySelectionDialog::GetSelectedKey () const
	{
		const int idx = Ui_.KeyCombo_->currentIndex ();
		return idx > 0 ? Keys_ [idx - 1] : QCA::PGPKey ();
	}
}
}
