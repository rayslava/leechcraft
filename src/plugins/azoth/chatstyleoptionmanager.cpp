/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "chatstyleoptionmanager.h"
#include <QStandardItemModel>
#include <QtDebug>
#include "interfaces/azoth/ichatstyleresourcesource.h"
#include "xmlsettingsmanager.h"
#include "core.h"

namespace LeechCraft
{
namespace Azoth
{
	ChatStyleOptionManager::ChatStyleOptionManager (const QByteArray& optionName, QObject *parent)
	: QObject (parent)
	, OptionName_ (optionName)
	, OptionsModel_ (Core::Instance ().GetChatStyleSourceModel ())
	, VariantModel_ (new QStandardItemModel (this))
	{
		if (!optionName.isEmpty ())
			XmlSettingsManager::Instance ().RegisterObject (optionName, this,
					"handleChatStyleSelected", XmlSettingsManager::EventFlag::Select);
	}

	QAbstractItemModel* ChatStyleOptionManager::GetStyleModel () const
	{
		return OptionsModel_;
	}

	QAbstractItemModel* ChatStyleOptionManager::GetVariantModel () const
	{
		return VariantModel_;
	}

	void ChatStyleOptionManager::AddChatStyleResourceSource (IChatStyleResourceSource *src)
	{
		if (OptionName_.isEmpty ())
			return;

		const QString& option = XmlSettingsManager::Instance ()
				.property (OptionName_).toString ();
		auto model = src->GetOptionsModel ();
		for (int i = 0, size = model->rowCount (); i < size; ++i)
			if (model->data (model->index (i, 0)).toString () == option)
			{
				handleChatStyleSelected (option);
				break;
			}
	}

	void ChatStyleOptionManager::handleChatStyleSelected (const QString& style)
	{
		VariantModel_->clear ();

		auto source = OptionsModel_->GetSourceForOption (style);
		if (!source)
			return;

		for (const QString& var : source->GetVariantsForPack (style))
			VariantModel_->appendRow (new QStandardItem (var));
	}

	void ChatStyleOptionManager::handleChatStyleSelected (const QVariant& val)
	{
		handleChatStyleSelected (val.toString ());
	}
}
}
