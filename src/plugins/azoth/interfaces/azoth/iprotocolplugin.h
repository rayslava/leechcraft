/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AZOTH_INTERFACES_IPROTOCOLPLUGIN_H
#define PLUGINS_AZOTH_INTERFACES_IPROTOCOLPLUGIN_H
#include <QList>

class QObject;

namespace LeechCraft
{
namespace Azoth
{
	/** This is the base interface for plugins providing messaging
	 * protocols. Since these plugins are plugins for plugins, they
	 * should also implement IPlugin2 and return the
	 * "org.LeechCraft.Plugins.Azoth.Plugins.IProtocolPlugin"
	 * string, among others, from their IPlugin2::GetPluginClasses()
	 * method.
	 */
	class IProtocolPlugin
	{
	public:
		virtual ~IProtocolPlugin () {}

		/** @brief Returns the protocol plugin object as a QObject.
		 *
		 * @return The protocol plugin as a QObject.
		 */
		virtual QObject* GetQObject () = 0;

		/** @brief Returns the protocols list provided by this plugin.
		 *
		 * Each object in this list must implement the IProtocol
		 * interface.
		 *
		 * @return The list of this plugin's protocols.
		 *
		 * @sa IProtocol, gotNewProtocols()
		 */
		virtual QList<QObject*> GetProtocols () const = 0;
	protected:
		/** @brief Notifies Azoth that new protocols are available.
		 *
		 * Each object in the protocols list must implement the
		 * IProtocol interface.
		 *
		 * After this signal the protocols should be contained in the
		 * list returned by GetProtocols().
		 *
		 * @note This function is expected to be a signal.
		 *
		 * @param[out] protocols The new protocols made available in
		 * this protocol plugin.
		 */
		virtual void gotNewProtocols (const QList<QObject*>& protocols) = 0;
	};
}
}

Q_DECLARE_INTERFACE (LeechCraft::Azoth::IProtocolPlugin,
		"org.Deviant.LeechCraft.Azoth.IProtocolPlugin/1.0");

#endif

