/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AZOTH_INTERFACES_IADVANCEDMESSAGE_H
#define PLUGINS_AZOTH_INTERFACES_IADVANCEDMESSAGE_H
#include <QtPlugin>

namespace LeechCraft
{
namespace Azoth
{
	/** This interface defines some advanced properties, actions and
	 * signals on messages, like delivery status.
	 * 
	 * Objects implementing this interface should, of course, implement
	 * plain IMessage as well.
	 * 
	 * @sa IMessage
	 */
	class IAdvancedMessage
	{
	public:
		virtual ~IAdvancedMessage () {}
		
		/** @brief Queries message delivery status.
		 * 
		 * This function returning false doesn't necessarily mean that
		 * the message hasn't been delivered, it may also mean that the
		 * target entry just doesn't support message delivery receipts.
		 * 
		 * @return true if the message has surely been delivered, false
		 * if we haven't got delivery receipt yet.
		 */
		virtual bool IsDelivered () const = 0;
		
		/** @brief Notifies that the message has been delivered.
		 * 
		 * Please note that this signal may never be emitted at all, for
		 * example, if the target entry doesn't support notifying us
		 * back about message delivery status.
		 * 
		 * @note This function is expected to be a signal.
		 */
		virtual void messageDelivered () = 0;
	};
}
}

Q_DECLARE_INTERFACE (LeechCraft::Azoth::IAdvancedMessage,
	"org.Deviant.LeechCraft.Azoth.IAdvancedMessage/1.0");

#endif
