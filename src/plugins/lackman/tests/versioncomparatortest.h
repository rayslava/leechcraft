/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include <QObject>
#include <QtTest>

#define VERSIONCOMPARATOR_DEBUG
#include "../versioncomparator.h"

using namespace LeechCraft::Plugins::LackMan;

class TestVersionComparator : public QObject
{
	Q_OBJECT
private slots:
	void doSanityChecks ()
	{
		QCOMPARE (IsVersionLess ("0", "1"), true);
		QCOMPARE (IsVersionLess ("1", "1"), false);
		QCOMPARE (IsVersionLess ("1", "0"), false);
		QCOMPARE (IsVersionLess ("1.0", "0.1"), false);
		QCOMPARE (IsVersionLess ("0.1.0", "0.1.0"), false);
		QCOMPARE (IsVersionLess ("0.1.0", "0.1.1"), true);
		QCOMPARE (IsVersionLess ("0.1.1", "0.1.0"), false);
		QCOMPARE (IsVersionLess ("0.3.70", "0.3.71"), true);
		QCOMPARE (IsVersionLess ("0.3", "0.3.0"), false);
		QCOMPARE (IsVersionLess ("0.3.0", "0.3"), false);
		QCOMPARE (IsVersionLess ("0.3.9999", "0.4"), true);
		QCOMPARE (IsVersionLess ("0.9999.9999.9999.9999", "1"), true);
		QCOMPARE (IsVersionLess ("0.3.70-beta1", "0.3.70"), true);
		QCOMPARE (IsVersionLess ("0.3.70", "0.3.70-beta1"), false);
		QCOMPARE (IsVersionLess ("0.3.70-alpha1", "0.3.70-alpha2"), true);
		QCOMPARE (IsVersionLess ("0.3.70-alpha3", "0.3.70-beta1"), true);
		QCOMPARE (IsVersionLess ("0.3.70-beta1", "0.3.70-alpha3"), false);
		QCOMPARE (IsVersionLess ("0.3.70-beta0", "0.3.70-alpha9"), false);
		QCOMPARE (IsVersionLess ("0.3.70-rc1", "0.3.71"), true);
		QCOMPARE (IsVersionLess ("0.3.71", "0.3.70-rc1"), false);
		QCOMPARE (IsVersionLess ("0.3.70-beta1", "0.4.0.92"), true);
		QCOMPARE (IsVersionLess ("0.4.0.92", "0.3.70-beta1"), false);
		//QCOMPARE (IsVersionLess ("", ""), );
	}

	void perfSimple1 ()
	{
		QBENCHMARK (IsVersionLess ("0", "1"));
	}

	void perfSimple2 ()
	{
		QBENCHMARK (IsVersionLess ("0.1.0", "0.1.1"));
	}

	void perfSimple3 ()
	{
		QBENCHMARK (IsVersionLess ("0.3.70", "0.4"));
	}

	void perfSimple4 ()
	{
		QBENCHMARK (IsVersionLess ("0.9999.9999.9999.9999", "1"));
	}

	void perfAlpha1 ()
	{
		QBENCHMARK (IsVersionLess ("0.3.70", "0.3.70-beta1"));
	}

	void perfAlpha2 ()
	{
		QBENCHMARK (IsVersionLess ("0.3.70-alpha1", "0.3.70-alpha2"));
	}
};
