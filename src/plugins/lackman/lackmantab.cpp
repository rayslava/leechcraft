/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "lackmantab.h"
#include <QStringListModel>
#include <util/shortcuts/shortcutmanager.h>
#include <util/tags/tagscompleter.h>
#include <util/util.h>
#include <interfaces/core/itagsmanager.h>
#include "core.h"
#include "typefilterproxymodel.h"
#include "stringfiltermodel.h"
#include "packagesmodel.h"
#include "packagesdelegate.h"
#include "pendingmanager.h"
#include "storage.h"
#include <interfaces/core/ipluginsmanager.h>

namespace LeechCraft
{
namespace LackMan
{
	LackManTab::LackManTab (Util::ShortcutManager *sm, const TabClassInfo& tabclass, QObject *parentPlugin)
	: TC_ (tabclass)
	, ParentPlugin_ (parentPlugin)
	, ShortcutMgr_ (sm)
	, TagsModel_ (new QStringListModel (this))
	, FilterString_ (new StringFilterModel (this))
	, TypeFilter_ (new TypeFilterProxyModel (this))
	{
		Ui_.setupUi (this);

		auto tc = new Util::TagsCompleter (Ui_.SearchLine_);
		tc->OverrideModel (TagsModel_);
		Ui_.SearchLine_->AddSelector ();

		auto selector = new Util::CategorySelector ();
		selector->setWindowFlags (0);
		selector->setMinimumHeight (0);
		selector->SetCaption (tr ("Package tags"));
		connect (selector,
				SIGNAL (tagsSelectionChanged (QStringList)),
				Ui_.SearchLine_,
				SLOT (handleSelectionChanged (QStringList)));
		connect (Ui_.SearchLine_,
				SIGNAL (textChanged (QString)),
				selector,
				SLOT (lineTextChanged (QString)));
		selector->setSizePolicy (QSizePolicy::Preferred, QSizePolicy::Expanding);
		Ui_.SearchLayout_->addWidget (selector);
		Ui_.SearchSplitter_->setStretchFactor (0, 2);
		Ui_.SearchSplitter_->setStretchFactor (1, 9);

		connect (&Core::Instance (),
				SIGNAL (tagsUpdated (QStringList)),
				Ui_.SearchLine_,
				SLOT (handleTagsUpdated (QStringList)));
		connect (&Core::Instance (),
				SIGNAL (tagsUpdated (QStringList)),
				selector,
				SLOT (setPossibleSelections (QStringList)));

		connect (&Core::Instance (),
				SIGNAL (tagsUpdated (QStringList)),
				this,
				SLOT (handleTagsUpdated (QStringList)));

		TypeFilter_->setDynamicSortFilter (true);
		TypeFilter_->setSourceModel (Core::Instance ().GetPluginsModel ());
		TypeFilter_->setSortCaseSensitivity (Qt::CaseInsensitive);

		FilterString_->setDynamicSortFilter (true);
		FilterString_->setFilterCaseSensitivity (Qt::CaseInsensitive);
		FilterString_->setSortCaseSensitivity (Qt::CaseInsensitive);
		FilterString_->setSourceModel (TypeFilter_);
		FilterString_->sort (PackagesModel::Columns::Name);

		Ui_.PackagesTree_->setModel (FilterString_);
		Ui_.PackagesTree_->setItemDelegate (new PackagesDelegate (Ui_.PackagesTree_));

		auto setColWidth = [this] (int col, const QString& sample)
		{
			Ui_.PackagesTree_->setColumnWidth (col, fontMetrics ().width (sample));
		};
		Ui_.PackagesTree_->setColumnWidth (PackagesModel::Columns::Inst, 32);
		Ui_.PackagesTree_->setColumnWidth (PackagesModel::Columns::Upd, 32);
		setColWidth (PackagesModel::Columns::Size, "999 KiB");
		setColWidth (PackagesModel::Columns::Version, "0.1.2.3-r4");
		setColWidth (PackagesModel::Columns::Description,
				"This is a typical package short description for Capcom Fighting Evolution");
		setColWidth (PackagesModel::Columns::Name, "Capcom Fighting Evolution package");

		Ui_.PendingTree_->setModel (Core::Instance ()
				.GetPendingManager ()->GetPendingModel ());

		connect (Ui_.PackagesTree_->selectionModel (),
				SIGNAL (currentRowChanged (const QModelIndex&, const QModelIndex&)),
				this,
				SLOT (handlePackageSelected (const QModelIndex&)));
		connect (Ui_.SearchLine_,
				SIGNAL (textChanged (const QString&)),
				FilterString_,
				SLOT (setFilterFixedString (const QString&)));

		connect (Core::Instance ().GetPendingManager (),
				SIGNAL (fetchListUpdated (const QList<int>&)),
				this,
				SLOT (handleFetchListUpdated (const QList<int>&)));

		const QStringList& tags = Core::Instance ().GetAllTags ();
		handleTagsUpdated (tags);
		Ui_.SearchLine_->handleTagsUpdated (tags);
		selector->setPossibleSelections (tags);
		handleFetchListUpdated ({});

		BuildActions ();

		const auto& browsers = Core::Instance ().GetProxy ()->
				GetPluginsManager ()->GetAllCastableTo<IWebBrowser*> ();
		if (browsers.size ())
			Ui_.Browser_->Construct (browsers.at (0));
		Ui_.Browser_->SetNavBarVisible (false);
		Ui_.Browser_->SetEverythingElseVisible (false);
	}

	TabClassInfo LackManTab::GetTabClassInfo () const
	{
		return TC_;
	}

	QObject* LackManTab::ParentMultiTabs ()
	{
		return ParentPlugin_;
	}

	void LackManTab::Remove ()
	{
		emit removeTab (this);
		deleteLater ();
	}

	QToolBar* LackManTab::GetToolBar () const
	{
		return Toolbar_;
	}

	QByteArray LackManTab::GetTabRecoverData () const
	{
		return "lackmantab";
	}

	QIcon LackManTab::GetTabRecoverIcon () const
	{
		return TC_.Icon_;
	}

	QString LackManTab::GetTabRecoverName () const
	{
		return TC_.VisibleName_;
	}

	void LackManTab::SetFilterTags (const QStringList& tags)
	{
		TypeFilter_->SetFilterMode (TypeFilterProxyModel::FilterMode::All);

		const auto& filter = Core::Instance ().GetProxy ()->GetTagsManager ()->Join (tags);
		FilterString_->setFilterFixedString (filter);

		Ui_.SearchLine_->setTags (tags);
	}

	void LackManTab::SetFilterString (const QString& string)
	{
		TypeFilter_->SetFilterMode (TypeFilterProxyModel::FilterMode::All);
		Ui_.SearchLine_->setText (string);
	}

	void LackManTab::BuildActions ()
	{
		UpdateAll_ = new QAction (tr ("Update all repos"), this);
		UpdateAll_->setProperty ("ActionIcon", "view-refresh");
		UpdateAll_->setShortcut (QString ("Ctrl+U"));
		connect (UpdateAll_,
				SIGNAL (triggered ()),
				&Core::Instance (),
				SLOT (updateAllRequested ()));
		ShortcutMgr_->RegisterAction ("updaterepos", UpdateAll_);

		UpgradeAll_ = new QAction (tr ("Upgrade all packages"), this);
		UpgradeAll_->setProperty ("ActionIcon", "system-software-update");
		UpgradeAll_->setShortcut (QString ("Ctrl+Shift+U"));
		connect (UpgradeAll_,
				SIGNAL (triggered ()),
				&Core::Instance (),
				SLOT (upgradeAllRequested ()));
		ShortcutMgr_->RegisterAction ("upgradeall", UpgradeAll_);

		Apply_ = new QAction (tr ("Apply"), this);
		Apply_->setProperty ("ActionIcon", "dialog-ok");
		Apply_->setShortcut (QString ("Ctrl+G"));
		connect (Apply_,
				SIGNAL (triggered ()),
				&Core::Instance (),
				SLOT (acceptPending ()));
		ShortcutMgr_->RegisterAction ("apply", Apply_);

		Cancel_ = new QAction (tr ("Cancel"), this);
		Cancel_->setProperty ("ActionIcon", "dialog-cancel");
		connect (Cancel_,
				SIGNAL (triggered ()),
				&Core::Instance (),
				SLOT (cancelPending ()));
		ShortcutMgr_->RegisterAction ("cancel", Cancel_);

		Toolbar_ = new QToolBar ("LackMan");
		Toolbar_->addAction (UpdateAll_);
		Toolbar_->addAction (UpgradeAll_);
		Toolbar_->addSeparator ();
		Toolbar_->addAction (Apply_);
		Toolbar_->addAction (Cancel_);
	}

	void LackManTab::handlePackageSelected (const QModelIndex& index)
	{
		QString text;
		auto AddText = [&text] (const QStringList& urls)
		{
			Q_FOREACH (const QString& url, urls)
				text += "<img src='" + url + "' alt='Image' /><br />";
		};

		AddText (index.data (PackagesModel::PMRThumbnails).toStringList ());

		QString descr = index.data (PackagesModel::PMRLongDescription).toString ();
		if (!descr.contains ("<br"))
			descr.replace ("\n\n", "<br/><br/>");
		text += descr;

		const QStringList& screens = index.data (PackagesModel::PMRScreenshots).toStringList ();
		text += "<hr/>";
		AddText (screens);

		Ui_.Browser_->SetHtml (text);

		if (index.isValid ())
		{
			const auto& nameIndex = index.sibling (index.row (), PackagesModel::Columns::Name);
			const auto& name = nameIndex.data ().toString ();
			Ui_.PackageInfoBox_->setTitle (tr ("Package information: %1").arg (name));
		}
		else
			Ui_.PackageInfoBox_->setTitle (tr ("Package information"));

		QString state;
		if (!index.isValid ()) ;
		else if (!index.data (PackagesModel::PMRInstalled).toBool ())
			state = tr ("not installed");
		else if (index.data (PackagesModel::PMRUpgradable).toBool ())
			state = tr ("installed; upgradable");
		else
			state = tr ("installed");
		Ui_.StateLabel_->setText (state);

		const qint64 size = index.data (PackagesModel::PMRSize).toLongLong ();
		const QString& sizeText = size >= 0 ?
				Util::MakePrettySize (size) :
				tr ("unknown");
		Ui_.SizeLabel_->setText (sizeText);

		const auto& tags = index.data (PackagesModel::PMRTags).toStringList ();
		Ui_.TagsLabel_->setText (tags.join ("; "));
	}

	void LackManTab::handleFetchListUpdated (const QList<int>& ids)
	{
		qint64 sumSize = 0;
		for (const int id : ids)
		{
			if (Core::Instance ().GetListPackageInfo (id).IsInstalled_)
				continue;

			const qint64 size = Core::Instance ().GetStorage ()->GetPackageSize (id);
			if (size > 0)
				sumSize += size;
		}

		if (sumSize > 0)
			Ui_.TotalSizeLabel_->setText (tr ("Total size to be downloaded: %1")
						.arg (Util::MakePrettySize (sumSize)));
		Ui_.TotalSizeLabel_->setVisible (sumSize > 0);
	}

	void LackManTab::handleTagsUpdated (const QStringList& tags)
	{
		TagsModel_->setStringList (tags);
	}

	void LackManTab::on_PackageStatus__currentIndexChanged (int index)
	{
		TypeFilter_->SetFilterMode (static_cast<TypeFilterProxyModel::FilterMode> (index));
	}
}
}
