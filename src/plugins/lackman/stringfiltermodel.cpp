/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "stringfiltermodel.h"
#include <QSet>
#include <interfaces/core/icoreproxy.h>
#include <interfaces/core/itagsmanager.h>
#include "packagesmodel.h"
#include "core.h"

namespace LeechCraft
{
namespace LackMan
{
	StringFilterModel::StringFilterModel (QObject *parent)
	: QSortFilterProxyModel (parent)
	{
	}

	bool StringFilterModel::filterAcceptsRow (int sourceRow, const QModelIndex& sourceParent) const
	{
		if (QSortFilterProxyModel::filterAcceptsRow (sourceRow, sourceParent))
			return true;

		const QString& filterString = filterRegExp ().pattern ();
		const QModelIndex& idx = sourceModel ()->index (sourceRow, 0, sourceParent);

		if (sourceModel ()->data (idx, PackagesModel::PMRShortDescription)
				.toString ().contains (filterString, Qt::CaseInsensitive))
			return true;

		const QSet<QString>& tags = QSet<QString>::fromList (sourceModel ()->
						data (idx, PackagesModel::PMRTags).toStringList ());
		const QStringList& queryList = Core::Instance ().GetProxy ()->
				GetTagsManager ()->Split (filterString);
		QSet<QString> userDefined = QSet<QString>::fromList (queryList);

		return tags.contains (userDefined);
	}
}
}
