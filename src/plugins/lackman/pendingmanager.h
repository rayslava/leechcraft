/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_LACKMAN_PENDINGMANAGER_H
#define PLUGINS_LACKMAN_PENDINGMANAGER_H
#include <QObject>
#include <QSet>
#include <QMap>

class QStandardItemModel;
class QStandardItem;
class QAbstractItemModel;

namespace LeechCraft
{
namespace LackMan
{
	class PendingManager : public QObject
	{
		Q_OBJECT

		QStandardItemModel *PendingModel_;

		enum Action
		{
			Install,
			Remove,
			Update,
			MAX
		};
		QMap<Action, QSet<int>> ScheduledForAction_;
		QMap<Action, QStandardItem*> RootItemForAction_;

		QMap<int, QList<int>> Deps_;
		QMap<int, QStandardItem*> ID2ModelRow_;

		bool NotifyFetchListUpdateScheduled_;
	public:
		PendingManager (QObject* = 0);

		QAbstractItemModel* GetPendingModel () const;
		void Reset ();
		void ToggleInstallRemove (int id, bool enable, bool installed);
		void ToggleUpdate (int id, bool enable);

		QSet<int> GetPendingInstall () const;
		QSet<int> GetPendingRemove () const;
		QSet<int> GetPendingUpdate () const;

		void SuccessfullyInstalled (int);
		void SuccessfullyRemoved (int);
		void SuccessfullyUpdated (int);
	private:
		void EnablePackageInto (int, Action);
		void DisablePackageFrom (int, Action);
		void ReinitRootItems ();

		void ScheduleNotifyFetchListUpdate ();
	private slots:
		void notifyFetchListUpdate ();
	signals:
		void packageUpdateToggled (int, bool);
		void fetchListUpdated (const QList<int>&);
	};
}
}

#endif
