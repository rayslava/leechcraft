/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_LACKMAN_PACKAGEPROCESSOR_H
#define PLUGINS_LACKMAN_PACKAGEPROCESSOR_H
#include <QObject>
#include <QDir>
#include <QHash>
#include <QUrl>
#include <QProcess>

namespace LeechCraft
{
namespace LackMan
{
	class ExternalResourceManager;

	class PackageProcessor : public QObject
	{
		Q_OBJECT

		QDir DBDir_;
		QHash<QUrl, int> URL2Id_;

		enum Mode
		{
			MInstall,
			MUpdate
		};

		QHash<QUrl, Mode> URL2Mode_;
	public:
		PackageProcessor (QObject* = 0);

		void Remove (int);
		void Install (int);
		void Update (int);
	private slots:
		void handleResourceFetched (const QUrl&);
		void handlePackageUnarchFinished (int, QProcess::ExitStatus);
		void handleUnarchError (QProcess::ProcessError);
	private:
		/** @brief This does all the heavy duty of installing a
			* package.
			*
			* Package is identified by its id downloaded from the
			* given url.
			*
			* This function can install or update the package to
			* the given target id, depending on installation mode.
			*
			* This function expects that the package at the url is
			* already fetched.
			*
			* @param[in] id The ID of the package.
			* @param[in] url The exact URL from which the package
			* @param[in] mode The handling mode.
			* has been downloaded.
			*/
		void HandleFile (int id, const QUrl& url, Mode mode);

		QUrl GetURLFor (int id) const;
		ExternalResourceManager* PrepareResourceManager ();

		bool HandleEntry (int id, const QFileInfo& fi,
				const QString& stagingDir, QDir& packageDir);
		bool CleanupBeforeUpdate (int oldId, int toId);
		bool CleanupDir (const QString&);
	signals:
		void packageInstallError (int, const QString&);
		void packageInstalled (int);
		void packageUpdated (int from, int to);
	};
}
}

#endif
