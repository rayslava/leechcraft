/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <QObject>
#include <QList>
#include <QFileInfo>
#include <QFileSystemWatcher>
#include <interfaces/structures.h>

namespace LeechCraft
{
namespace Nacheku
{
	/** Watches a given directory for files which could be handled.
	 */
	class DirectoryWatcher : public QObject
	{
		Q_OBJECT

		std::unique_ptr<QFileSystemWatcher> Watcher_;
		QList<QFileInfo> Olds_;
	public:
		/** Constructs the watcher, registers it as a client for
		 * "WatchDirectory" setting in the XML settings manager (the
		 * settingsChanged() is used for that).
		 *
		 * @param[in] parent The parent object.
		 */
		DirectoryWatcher (QObject *parent = 0);
	private slots:
		/** Handles the changed settings. Removes previous directory
		 * from the watch list and adds a new one. Checks the new
		 * directory for entities.
		 */
		void settingsChanged ();

		/** Handles the changes in the directory. Compares the
		 * QFileInfos from previous run with current ones and emits
		 * gotEntity() for each file which has been added or modified
		 * since the previous check.
		 *
		 * @param[in] dir The directory that changed.
		 */
		void handleDirectoryChanged (const QString& dir);
	signals:
		/** Emitted when a new or modified file is detected.
		 */
		void gotEntity (const LeechCraft::Entity& entity);
	};
}
}

