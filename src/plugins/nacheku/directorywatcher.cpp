/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "directorywatcher.h"
#include <QDir>
#include <QTimer>
#include <QUrl>
#include <util/util.h>
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Nacheku
{
	DirectoryWatcher::DirectoryWatcher (QObject *parent)
	: QObject (parent)
	, Watcher_ (new QFileSystemWatcher)
	{
		XmlSettingsManager::Instance ().RegisterObject ("WatchDirectory",
				this,
				"settingsChanged");

		QTimer::singleShot (5000,
				this,
				SLOT (settingsChanged ()));

		connect (Watcher_.get (),
				SIGNAL (directoryChanged (const QString&)),
				this,
				SLOT (handleDirectoryChanged (const QString&)),
				Qt::QueuedConnection);
	}

	void DirectoryWatcher::settingsChanged ()
	{
		const QString& path = XmlSettingsManager::Instance ()
				.property ("WatchDirectory").toString ();
		const QStringList& dirs = Watcher_->directories ();
		if (dirs.size () == 1 &&
				dirs.at (0) == path)
			return;

		if (!dirs.isEmpty ())
			Watcher_->removePaths (dirs);

		if (!path.isEmpty ())
		{
			QDir dir (path);
			Olds_ = dir.entryInfoList (QDir::Files);

			Watcher_->addPath (path);
			handleDirectoryChanged (path);
		}
	}

	void DirectoryWatcher::handleDirectoryChanged (const QString& path)
	{
		QDir dir (path);
		const auto& cur = dir.entryInfoList (QDir::Files);
		auto nl = cur;

		Q_FOREACH (const QFileInfo& oldFi, Olds_)
		{
			const QString& fname = oldFi.absoluteFilePath ();
			Q_FOREACH (const QFileInfo& newFi, nl)
				if (newFi.absoluteFilePath () == fname)
				{
					nl.removeOne (newFi);
					break;
				}
		}

		Olds_ = cur;

		Q_FOREACH (const QFileInfo& newFi, nl)
			emit gotEntity (Util::MakeEntity (QUrl::fromLocalFile (newFi.absoluteFilePath ()),
						path,
						FromUserInitiated));
	}
}
}

